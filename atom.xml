<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Kiminozo's Tech Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-03-19T14:50:45.888Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[kiminozo]]></name>
    <email><![CDATA[kiminzoeien#gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2014/03/19/hello-world/"/>
    <id>http://yoursite.com/2014/03/19/hello-world/</id>
    <published>2014-03-19T13:42:29.000Z</published>
    <updated>2014-03-19T13:42:29.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows Phone Toolkit for WP8 已经出了]]></title>
    <link href="http://yoursite.com/2012/11/02/windows-phone-toolkit-for-wp8-%E5%B7%B2%E7%BB%8F%E5%87%BA%E4%BA%86/"/>
    <id>http://yoursite.com/2012/11/02/windows-phone-toolkit-for-wp8-已经出了/</id>
    <published>2012-11-02T00:40:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>项目已经移动到<a href="http://phone.codeplex.com/" target="_blank">http://phone.codeplex.com/</a>，等了几个月和终于Sdk正式版一起出了，之前还自己升级编译的。</p>
<p>What’s New<br>Refactored project to support Windows Phone 7.1, 8.0 and more with maximum code sharing.<br>WP8 Map API extensions, including Modern PushPin control<br>LongListMultiSelector control, including Grid view multiselect.<br>Control themes updated to match WP8 UI<br>Large number of RTL bugs fixed now that RTL is a fully supported feature in WP8<br>25+ bugs fixed<br>Contains all the fixes, improvements and new controls that were part of the September 2012 release, you can read more about that here: Windows Phone Toolkit &ndash; September 2012 Release<br>Removed LongListSelector as it&rsquo;s now part of the SDK<br>Removed Tuple.cs<br>Removed PerformanceProgressBar (though we are taking the suggestion that we should add it back as a descendent of ProgressBar for backcompat)<br>Removed GestureListener</p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[代码分享 ScrollViewerListener 获取ScrollViewer的位置改变]]></title>
    <link href="http://yoursite.com/2012/06/17/%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB-scrollviewerlistener-%E8%8E%B7%E5%8F%96scrollviewer%E7%9A%84%E4%BD%8D%E7%BD%AE%E6%94%B9%E5%8F%98/"/>
    <id>http://yoursite.com/2012/06/17/代码分享-scrollviewerlistener-获取scrollviewer的位置改变/</id>
    <published>2012-06-17T04:58:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>WP没有办法直接获取ScrollViewer的位置，但是可以ScrollViewer通过VerticalOffset的绑定监听实现。</p>
<p>下面写了一个ScrollViewerListener 用于给ScrollViewer扩展一个VerticalScrollChanged事件。</p>
<p>&nbsp;</p>
<p>思路是这样的：</p>
<p>1 首先给ScrollViewer附加2个属性VerticalOffsetProperty和ListenerProperty.</p>
<p>&nbsp;</p>
<p>2 VerticalOffsetProperty是VerticalOffset的复制，但是VerticalOffsetProperty在meta里定义了自己的回调OnVerticalOffsetChanged，</p>
<p>然后利用Binding的特点 将Source 设置成ScrollViewer，使ta的VerticalOffset和ScrollViewerListener引用的VerticalOffsetProperty绑定起来，</p>
<p>这样ScrollViewer的VerticalOffset也会使VerticalOffsetProperty同时改变，并能在OnVerticalOffsetChanged回调里面处理了。</p>
<p>&nbsp;</p>
<p>3 ListenerProperty就是ScrollViewerListener本身的引用。</p>
<p>在处理OnVerticalOffsetChanged回调的时候有个问题，就是sender是ScrollViewer怎么取到ScrollViewerListener呢？</p>
<p> 通过ListenerProperty就可以把ScrollViewerListener附加给ScrollViewer这样就可以取得ScrollViewerListener的引用了。</p>
<p><span style="color: #993300;">也不会因为在静态方法引用了ScrollViewerListener造成GC不能回收(网上有一种在构造函数使用lambda的方法会产生这种问题)</span>。</p>
<p>&nbsp;</p>
<p>4 最后取回ScrollViewerListener的引用，并引发VerticalScrollChanged事件。功能就完成了。</p>
<p>&nbsp;</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('296b46c0-fe2b-4323-90cf-e185003f9c89')"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""><span class="cnblogs_code_collapse">View Code </span><br><div id="cnblogs_code_open_296b46c0-fe2b-4323-90cf-e185003f9c89" class="cnblogs_code_hide"><br><pre><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br> <span style="color: #808080;">///</span><span style="color: #008000;"> ScrollViewerListener<br> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br> <span style="color: #0000ff;">internal</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ScrollViewerListener<br> {<br> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br> <span style="color: #808080;">///</span><span style="color: #008000;"> 附加ScrollViewerListener<br> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span><span style="color: #000000;"> DependencyProperty ListenerProperty;<br><br> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br> <span style="color: #808080;">///</span><span style="color: #008000;"> 附加VerticalOffset<br> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br> <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span><span style="color: #000000;"> DependencyProperty VerticalOffsetProperty;<br><br> </span><span style="color: #0000ff;">static</span><span style="color: #000000;"> ScrollViewerListener()<br> {<br> ListenerProperty </span>= DependencyProperty.RegisterAttached(<span style="color: #800000;">“</span><span style="color: #800000;">Listener</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span><span style="color: #000000;"> (ScrollViewerListener),<br> </span><span style="color: #0000ff;">typeof</span><span style="color: #000000;"> (ScrollViewer),<br> </span><span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #0000ff;">default</span><span style="color: #000000;">(ScrollViewerListener)));<br> VerticalOffsetProperty </span>= DependencyProperty.RegisterAttached(<span style="color: #800000;">“</span><span style="color: #800000;">VerticalOffset</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span> (<span style="color: #0000ff;">double</span><span style="color: #000000;">),<br> </span><span style="color: #0000ff;">typeof</span><span style="color: #000000;"> (ScrollViewer),<br> </span><span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #0000ff;">default</span>(<span style="color: #0000ff;">double</span><span style="color: #000000;">),<br> OnVerticalOffsetChanged));<br> }<br><br> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br> <span style="color: #808080;">///</span><span style="color: #008000;"> ScrollViewer监听器<br> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br> <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”scrollViewer”&gt;</span><span style="color: #008000;">ScrollViewer</span><span style="color: #808080;">&lt;/param&gt;</span><br> <span style="color: #0000ff;">public</span><span style="color: #000000;"> ScrollViewerListener(ScrollViewer scrollViewer)<br> {<br> </span><span style="color: #0000ff;">if</span> (scrollViewer == <span style="color: #0000ff;">null</span>) <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br> </span><span style="color: #008000;">//</span><span style="color: #008000;">附加ScrollViewerListener给ScrollViewer</span><br> scrollViewer.SetValue(ListenerProperty, <span style="color: #0000ff;">this</span><span style="color: #000000;">);<br> </span><span style="color: #008000;">//</span><span style="color: #008000;">附加绑定ScrollViewer.VerticalOffset给VerticalOffsetProperty</span><br> scrollViewer.SetBinding(VerticalOffsetProperty, <span style="color: #0000ff;">new</span> Binding(<span style="color: #800000;">“</span><span style="color: #800000;">VerticalOffset</span><span style="color: #800000;">“</span>) { Source =<span style="color: #000000;"> scrollViewer });<br><br> }<br><br> </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> OnVerticalOffsetChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)<br> {<br> </span><span style="color: #0000ff;">var</span> scrollViewer = sender <span style="color: #0000ff;">as</span><span style="color: #000000;"> ScrollViewer;<br> </span><span style="color: #0000ff;">if</span> (scrollViewer != <span style="color: #0000ff;">null</span> &amp;&amp; e.OldValue !=<span style="color: #000000;"> e.NewValue)<br> {<br> </span><span style="color: #008000;">//</span><span style="color: #008000;">从scrollViewer取回ScrollViewerListener</span><br> <span style="color: #0000ff;">var</span> listener = scrollViewer.GetValue(ListenerProperty) <span style="color: #0000ff;">as</span><span style="color: #000000;"> ScrollViewerListener;<br> </span><span style="color: #0000ff;">if</span> (listener != <span style="color: #0000ff;">null</span><span style="color: #000000;">)<br> {<br> listener.OnVerticalScrollChanged();<br> }<br> }<br> }<br> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br> <span style="color: #808080;">///</span><span style="color: #008000;"> 纵向滚动事件<br> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">event</span><span style="color: #000000;"> EventHandler VerticalScrollChanged;<br><br> </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> OnVerticalScrollChanged()<br> {<br> </span><span style="color: #0000ff;">var</span> tmp =<span style="color: #000000;"> VerticalScrollChanged;<br> </span><span style="color: #0000ff;">if</span> (tmp != <span style="color: #0000ff;">null</span><span style="color: #000000;">)<br> tmp(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">, EventArgs.Empty);<br> }<br> }</span></pre><br></div><br></div>]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[经验 C#手动同步的滥用实例]]></title>
    <link href="http://yoursite.com/2012/04/18/%E7%BB%8F%E9%AA%8C-c%E6%89%8B%E5%8A%A8%E5%90%8C%E6%AD%A5%E7%9A%84%E6%BB%A5%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2012/04/18/经验-c手动同步的滥用实例/</id>
    <published>2012-04-18T07:17:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>刚刚到新公司发现很多同学在用AutoResetEvent作线程同步，有的人用AutoResetEvent代替了C#的lock,</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Func2()<br>{<br>Console.WriteLine(</span><span style="color: #800000;">“</span><span style="color: #800000;">Func2 WaitOne</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>autoResetEvent.WaitOne();<br> Thread.Sleep(</span><span style="color: #800080;">1000</span>); <span style="color: #008000;">//</span><span style="color: #008000;">do Something</span><br>Console.WriteLine(<span style="color: #800000;">“</span><span style="color: #800000;">Func2 Set</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>autoResetEvent.Set();<br>}</span></pre><br></div>

<p>这种写法我还是真是第一次见到。所以不是很确定，结果我研究了一下果然杯具了，重入后直接死锁了。</p>
<p>示例：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">class</span><span style="color: #000000;"> Program<br>{<br><br></span><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)<br>{<br></span><span style="color: #0000ff;">var</span> p = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Program();<br></span><br><span style="color: #000000;">p.Func1();<span style="color: #008000;">/</span><span style="color: #008000;">这样会死锁<br><br></span>}<br><br>AutoResetEvent autoResetEvent </span>= <span style="color: #0000ff;">new</span> AutoResetEvent(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br><br></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Func1()<br>{<br>Console.WriteLine(</span><span style="color: #800000;">“</span><span style="color: #800000;">Func1 WaitOne</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>autoResetEvent.WaitOne();<br>Thread.Sleep(</span><span style="color: #800080;">1000</span><span style="color: #000000;">);<br>Func2();<br>Console.WriteLine(</span><span style="color: #800000;">“</span><span style="color: #800000;">Func1 Set</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>autoResetEvent.Set();<br>}<br><br></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Func2()<br>{<br>Console.WriteLine(</span><span style="color: #800000;">“</span><span style="color: #800000;">Func2 WaitOne</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>autoResetEvent.WaitOne();<br>Thread.Sleep(</span><span style="color: #800080;">1000</span><span style="color: #000000;">);<br>Console.WriteLine(</span><span style="color: #800000;">“</span><span style="color: #800000;">Func2 Set</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>autoResetEvent.Set();<br>}<br>}</span></pre><br></div>

<p>正确的写法还是用lock或者直接<span style="color: #000000;">Monitor（try-finally暂时省略）</span>，看来这周需要花大功夫整改了。</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">readonly</span> <span style="color: #0000ff;">object</span> lockObj = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">object</span><span style="color: #000000;">();<br><br>        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Func3()<br>        {<br>            Console.WriteLine(</span><span style="color: #800000;">“</span><span style="color: #800000;">Func3 WaitOne</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>            Monitor.Enter(lockObj);<br>            Thread.Sleep(</span><span style="color: #800080;">1000</span><span style="color: #000000;">);<br>            Func4();<br>            Console.WriteLine(</span><span style="color: #800000;">“</span><span style="color: #800000;">Func3 Set</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>            Monitor.Exit(lockObj);<br>        }<br><br>        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Func4()<br>        {<br>            Console.WriteLine(</span><span style="color: #800000;">“</span><span style="color: #800000;">Func4 WaitOne</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>            Monitor.Enter(lockObj);<br>            Thread.Sleep(</span><span style="color: #800080;">1000</span><span style="color: #000000;">);<br>            Console.WriteLine(</span><span style="color: #800000;">“</span><span style="color: #800000;">Func4 Set</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>            Monitor.Exit(lockObj);<br>        }</span></pre><br></div>

<p>&nbsp;</p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WP7技巧 扩展【共享...】按钮]]></title>
    <link href="http://yoursite.com/2012/04/06/wp7%E6%8A%80%E5%B7%A7-%E6%89%A9%E5%B1%95%E3%80%90%E5%85%B1%E4%BA%AB-%E3%80%91%E6%8C%89%E9%92%AE/"/>
    <id>http://yoursite.com/2012/04/06/wp7技巧-扩展【共享-】按钮/</id>
    <published>2012-04-05T23:17:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>在WP的图片库里面选择一张图片会有【共享…】的按钮可以通过彩信、邮件等发送，也可以自定义共享到自己的APP中，如新浪微博就是很好的例子，如何添加自定义共享呢？</p>
<p>&nbsp;</p>
<p>需要3个步骤</p>
<p>1 在程序配置里面声明【共享…】扩展</p>
<p>2 在MainPage获取的OnNavigatedTo事件中取得图片信息</p>
<p>3 通过Xna里面提供的MediaLibrary来取得媒体库的图片流</p>
<p>&nbsp;</p>
<p>声明以下内容参考了</p>
<p><a href="http://msdn.microsoft.com/zh-cn/library/ff967563(v=vs.92" target="_blank">http://msdn.microsoft.com/zh-cn/library/ff967563(v=vs.92).aspx</a>.aspx “<a href="http://msdn.microsoft.com/zh-cn/library/ff967563(v=vs.92).aspx" target="_blank">http://msdn.microsoft.com/zh-cn/library/ff967563(v=vs.92).aspx</a>“)</p>
<p>&nbsp;</p>
<h2 id="声明共享选取器扩展">声明共享选取器扩展</h2>
<p>打开 WMAppManifest.xml文件 在Tokens元素后面添加</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Extensions</span><span style="color: #0000ff;">&gt;</span><br>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Extension </span><span style="color: #ff0000;">ExtensionName</span><span style="color: #0000ff;">=”Photos_Extra_Share”</span><span style="color: #ff0000;"> ConsumerID</span><span style="color: #0000ff;">=”{5B04B775-356B-4AA0-AAF8-6491FFEA5632}”</span><span style="color: #ff0000;"> TaskID</span><span style="color: #0000ff;">=”_default”</span> <span style="color: #0000ff;">/&gt;</span><br>   <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Extensions</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>MSDN上没有详细说明，但是每个属性好像都是固定值，包括 <span style="color: #ff0000;">ConsumerID</span>都不用修改</p>
<p>&nbsp;</p>
<h2 id="获取图片信息">获取图片信息</h2>
<p>首先调整界面，修改MainPage的ContentPanel添加Image名为retrievePic用于呈现图片</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">&lt;!—</span><span style="color: #008000;">ContentPanel - place additional content here</span><span style="color: #008000;">—&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Grid </span><span style="color: #ff0000;">x:Name</span><span style="color: #0000ff;">=”ContentPanel”</span><span style="color: #ff0000;"> Grid.Row</span><span style="color: #0000ff;">=”1”</span><span style="color: #ff0000;"> Margin</span><span style="color: #0000ff;">=”12,0,12,0”</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Image<br>                </span><span style="color: #ff0000;">Height</span><span style="color: #0000ff;">=”350”</span><span style="color: #ff0000;"><br>                HorizontalAlignment</span><span style="color: #0000ff;">=”Left”</span><span style="color: #ff0000;"><br>                Margin</span><span style="color: #0000ff;">=”15,15,0,0”</span><span style="color: #ff0000;"><br>                Name</span><span style="color: #0000ff;">=”retrievePic”</span><span style="color: #ff0000;"><br>                Stretch</span><span style="color: #0000ff;">=”Fill”</span><span style="color: #ff0000;"><br>                VerticalAlignment</span><span style="color: #0000ff;">=”Top”</span><span style="color: #ff0000;"><br>                Width</span><span style="color: #0000ff;">=”450”</span> <span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Grid</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>&nbsp;</p>
<p>添加对Microsoft.Xna.Framework的引用，主要是为了使用MediaLibrary</p>
<p>在 MainPage.xaml.cs 重写OnNavigatedTo事件</p>
<p>&nbsp;</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnNavigatedTo(NavigationEventArgs e)<br>        {<br>            <span style="color: #008000;">//</span><span style="color: #008000;">获取传入的QueryString </span><span style="color: #008000;"><br></span>            IDictionary&lt;<span style="color: #0000ff;">string</span>, <span style="color: #0000ff;">string</span>&gt; queryStrings = <span style="color: #0000ff;">this</span>.NavigationContext.QueryString;<br><br>            <span style="color: #008000;">//</span><span style="color: #008000;">检查是否有FileId<br>            </span><span style="color: #008000;">//</span><span style="color: #008000;">FileId包含了获取图片的Token字符串 </span><span style="color: #008000;"><br></span>            <span style="color: #0000ff;">if</span> (queryStrings.ContainsKey(<span style="color: #800000;">“</span><span style="color: #800000;">FileId</span><span style="color: #800000;">“</span>))<br>            {<br>                <span style="color: #008000;">//</span><span style="color: #008000;">通过MediaLibrary获取图片Picture </span><span style="color: #008000;"><br></span>                MediaLibrary library = <span style="color: #0000ff;">new</span> MediaLibrary();<br>                Picture picture = library.GetPictureFromToken(queryStrings[<span style="color: #800000;">“</span><span style="color: #800000;">FileId</span><span style="color: #800000;">“</span>]);<br><br>                <span style="color: #008000;">//</span><span style="color: #008000;">将图片设置到retrievePic呈现 </span><span style="color: #008000;"><br></span>                BitmapImage bitmap = <span style="color: #0000ff;">new</span> BitmapImage();<br>                bitmap.CreateOptions = BitmapCreateOptions.None;<br>                bitmap.SetSource(picture.GetImage());<br><br>                WriteableBitmap picLibraryImage = <span style="color: #0000ff;">new</span> WriteableBitmap(bitmap);<br>                retrievePic.Source = picLibraryImage;<br>            }<br>        }</pre><br></div>

<p>&nbsp;</p>
<p>因为模拟器没有图片库，只能在真机上测试了。</p>
<p>&nbsp;</p>
<p>附上代码：</p>
<p><a href="http://files.cnblogs.com/kiminozo/ShareExtendDemo.rar" target="_blank">http://files.cnblogs.com/kiminozo/ShareExtendDemo.rar&nbsp;</a></p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bangumi 番組計劃 WP手机客户端发布]]></title>
    <link href="http://yoursite.com/2012/03/25/bangumi-%E7%95%AA%E7%B5%84%E8%A8%88%E5%8A%83-wp%E6%89%8B%E6%9C%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E5%B8%83/"/>
    <id>http://yoursite.com/2012/03/25/bangumi-番組計劃-wp手机客户端发布/</id>
    <published>2012-03-25T01:30:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>Bangumi 番組計劃 手机客户端</p>
<p>卖个纯广告，最近完成了一个ACG网站的手机客户端程序，欢迎下载：</p>
<p><a href="http://www.windowsphone.com/zh-CN/apps/14b39a30-7e5a-4427-88ed-fa40d7e841c1" target="_blank"><img src="http://pic002.cnblogs.com/images/2012/25121/2012013020043528.gif" alt=""></a></p>
<p><a href="http://www.windowsphone.com/zh-CN/apps/14b39a30-7e5a-4427-88ed-fa40d7e841c1" title="http://www.windowsphone.com/zh-CN/apps/14b39a30-7e5a-4427-88ed-fa40d7e841c1" target="_blank">http://www.windowsphone.com/zh-CN/apps/14b39a30-7e5a-4427-88ed-fa40d7e841c1</a></p>
<p>Bangumi 番组计划 手机客户端。<br>轻触屏幕,在手机上记录你曾经看过的动画、书籍、音乐；<br>独特的收视进度管理功能让你不必担心将看过的章节下载第二次；在乐园里游玩了解各类符合你口味的讯息动向，或到小组里寻觅趣味相投的伙伴。只需要一个 Bangumi 帐户，你就可以拥有这一切。</p>
<p><img src="http://i.imgur.com/pL56H.png" alt=""></p>
<p><img src="http://i.imgur.com/sBmE2.png" alt=""></p>
<p>&nbsp;</p>
<h2 id="&nbsp;">&nbsp;</h2>
<h2 id="控件共享：">控件共享：</h2>
<p>里面的一些自己写的控件我将它们共享出来：</p>
<p><a href="http://www.cnblogs.com/kiminozo/archive/2012/02/28/2372605.html" target="_blank">WP7应用开发笔记 继承BitmapSource并使用独立存储来缓存远程的图片</a></p>
<p><a href="http://www.cnblogs.com/kiminozo/archive/2012/03/19/2406432.html" target="_blank">WP7自定义控件 TabSwitch控件</a></p>
<p><a href="http://www.cnblogs.com/kiminozo/archive/2012/03/11/2390564.html" target="_blank">WP7自定义控件 评分控件</a></p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WP7进阶技巧 自定义Toast 提示动画效果]]></title>
    <link href="http://yoursite.com/2012/03/22/wp7%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7-%E8%87%AA%E5%AE%9A%E4%B9%89toast-%E6%8F%90%E7%A4%BA%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2012/03/22/wp7进阶技巧-自定义toast-提示动画效果/</id>
    <published>2012-03-21T20:36:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>Coding4Fun.Phone.Toolkit 这个库大家应该比较熟悉了吧，里面有一个ToastPrompt提供了本地Toast 方式提示，非常实用。可以参考我这篇文章<a href="http://www.cnblogs.com/kiminozo/archive/2012/01/28/2330521.html" target="_blank">WP7应用开发笔记(16) 本地Toast 提示</a>。</p>
<p>但是ToastPrompt的效果比较简单，如果需要扩展就比较麻烦，下面我来说明一下如何模拟新浪微博类似的Toast。</p>
<p>&nbsp;</p>
<p>做之前首先看看SL的模拟效果吧：</p>
<object width="450" height="200" data="data:application/x-silverlight-2," type="application/x-silverlight-2"><param name="source" value="http://files.cnblogs.com/kiminozo/ToastPrompt.xap" /><param name="minRuntimeVersion" value="4.0.50826.0" /><param name="src" value="data:application/x-silverlight-2," /></object>

<p>无法观看，请下载直接下载示例<a href="http://files.cnblogs.com/kiminozo/ToastPromptDemo.rar" target="_blank"> http://files.cnblogs.com/kiminozo/ToastPromptDemo.rar </a></p>
<p>&nbsp;&nbsp;</p>
<h2 id="了解DialogService">了解DialogService</h2>
<p>查看Coding4Fun的源代码，里面主要使用了DialogService类来实现的</p>
<p><a href="http://blogs.claritycon.com/kevinmarshall/2010/10/13/wp7-page-transitions-sample/" title="http://blogs.claritycon.com/kevinmarshall/2010/10/13/wp7-page-transitions-sample/" target="_blank">http://blogs.claritycon.com/kevinmarshall/2010/10/13/wp7-page-transitions-sample/</a></p>
<p>DialogService的源代码请去Blog下载</p>
<p>&nbsp;</p>
<p>比较重要的成员是</p>
<p>AnimationType 动画类型</p>
<p>Child 容器内的用于控件</p>
<p>IsBackKeyOverride 是否覆盖后退键</p>
<p>Overlay 覆盖颜色，null的情况不会影响触控操作。</p>
<p>Opened、Closed事件</p>
<p>Show()、Hide() 显示、隐藏</p>
<p>&nbsp;</p>
<h2 id="修改DialogService">修改DialogService</h2>
<p>需要自定义效果 需要修改Coding4Fun的源代码，</p>
<p>请去<a href="http://coding4fun.codeplex.com/releases/view/79749" title="http://coding4fun.codeplex.com/releases/view/79749" target="_blank">http://coding4fun.codeplex.com/releases/view/79749</a>下载。</p>
<p>&nbsp;</p>
<p>添加效果最重要的是增加AnimationType</p>
<p>默认只有2种Slide，Coding4Fun代码里面增加了2种SlideHorizontal</p>
<p>枚举如下</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">enum</span> AnimationTypes<br>        {<br>            Slide,<br>            SlideHorizontal,<br>            Swivel,<br>            SwivelHorizontal,<br>            Vetical<span style="color: #008000;">//</span><span style="color: #008000;">new </span><span style="color: #008000;"><br></span>        }</pre><br></div>

<p>为了实现我需要的效果，我添加了一种名叫Vetical的动画类型。</p>
<p>&nbsp;</p>
<p>为这个类型添加2个Storyboard</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">string</span> VeticalInStoryboard =<br>             <span style="color: #800000;">@”</span><span style="color: #800000;">&lt;Storyboard  xmlns=””<a href="http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&quot;&amp;gt" target="_blank">http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&quot;&amp;gt</a>;<br>                 &lt;DoubleAnimationUsingKeyFrames Storyboard.TargetProperty=””(UIElement.RenderTransform).(TranslateTransform.Y)””&gt;<br>                      &lt;EasingDoubleKeyFrame KeyTime=””0”” Value=””-50””/&gt;<br>                      &lt;EasingDoubleKeyFrame KeyTime=””0:0:2”” Value=””0””&gt;<br>                      &lt;EasingDoubleKeyFrame.EasingFunction&gt;<br>                         &lt;ExponentialEase EasingMode=””EaseInOut”” Exponent=””6””/&gt;<br>                     &lt;/EasingDoubleKeyFrame.EasingFunction&gt;<br>                     &lt;/EasingDoubleKeyFrame&gt;<br>                 &lt;/DoubleAnimationUsingKeyFrames&gt;<br>                 &lt;DoubleAnimation Storyboard.TargetProperty=””(UIElement.Opacity)”” From=””0”” To=””1”” Duration=””0:0:2””<br>                             Storyboard.TargetName=””LayoutRoot””&gt;<br>                 &lt;DoubleAnimation.EasingFunction&gt;<br>                          &lt;ExponentialEase EasingMode=””EaseOut”” Exponent=””6””/&gt;<br>                &lt;/DoubleAnimation.EasingFunction&gt;<br>                &lt;/DoubleAnimation&gt;<br>           &lt;/Storyboard&gt;</span><span style="color: #800000;">“</span>;<br><br>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">string</span> VeticalOutStoryboard =<br>             <span style="color: #800000;">@”</span><span style="color: #800000;">&lt;Storyboard  xmlns=””<a href="http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&quot;&amp;gt" target="_blank">http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&quot;&amp;gt</a>;<br>                 &lt;DoubleAnimationUsingKeyFrames Storyboard.TargetProperty=””(UIElement.RenderTransform).(TranslateTransform.Y)””&gt;<br>                      &lt;EasingDoubleKeyFrame KeyTime=””0”” Value=””0””/&gt;<br>                      &lt;EasingDoubleKeyFrame KeyTime=””0:0:1”” Value=””-50””&gt;<br>                      &lt;EasingDoubleKeyFrame.EasingFunction&gt;<br>                         &lt;ExponentialEase EasingMode=””EaseInOut”” Exponent=””6””/&gt;<br>                     &lt;/EasingDoubleKeyFrame.EasingFunction&gt;<br>                     &lt;/EasingDoubleKeyFrame&gt;<br>                 &lt;/DoubleAnimationUsingKeyFrames&gt;<br>                 &lt;DoubleAnimation Storyboard.TargetProperty=””(UIElement.Opacity)”” From=””1”” To=””0”” Duration=””0:0:1””<br>                             Storyboard.TargetName=””LayoutRoot””&gt;<br>                 &lt;DoubleAnimation.EasingFunction&gt;<br>                          &lt;ExponentialEase EasingMode=””EaseIn”” Exponent=””6””/&gt;<br>                &lt;/DoubleAnimation.EasingFunction&gt;<br>                &lt;/DoubleAnimation&gt;<br>           &lt;/Storyboard&gt;</span><span style="color: #800000;">“</span>;</pre><br></div>

<p>找到Show()的代码，在switch中添加</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">case</span> AnimationTypes.Vetical:<br>                      storyboard = XamlReader.Load(VeticalInStoryboard) <span style="color: #0000ff;">as</span> Storyboard;<br>                      _overlay.RenderTransform = <span style="color: #0000ff;">new</span> TranslateTransform();<br>                      <span style="color: #0000ff;">break</span>; </pre><br></div>

<p>Hide()同理</p>
<p>&nbsp;</p>
<p>然后找到Coding4Fun的ToastPrompt类，修改Show()里面的</p>
<div class="cnblogs_code"><br><pre>AnimationType = DialogService.AnimationTypes.Vetical,</pre><br></div>

<p>&nbsp;</p>
<p>如下：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Show()<br>{<br>           ..<br><br>            dialogService = <span style="color: #0000ff;">new</span> DialogService<br>            {<br>                AnimationType = DialogService.AnimationTypes.Vetical,<br>                Child = <span style="color: #0000ff;">this</span>,<br>                IsBackKeyOverride = <span style="color: #0000ff;">true</span><br>            };<br><br>         …<br><br>  }</pre><br></div>

<p>&nbsp;</p>
<p>当然也可以使用面向对象的知识多态化ToastPrompt，这里就不详细描述了。</p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WP7自定义控件 TabSwitch控件]]></title>
    <link href="http://yoursite.com/2012/03/19/wp7%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-tabswitch%E6%8E%A7%E4%BB%B6/"/>
    <id>http://yoursite.com/2012/03/19/wp7自定义控件-tabswitch控件/</id>
    <published>2012-03-19T01:41:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>我在写一个类似tabcontrol的选项控件，在很多网站的Menu的效果，不知道怎么取名字，暂时就叫TabSwitch吧。</p>
<p>效果如下：</p>
<object width="450" height="100" data="http://files.cnblogs.com/kiminozo/TabSwitch.xap" type="application/x-silverlight-2"><param name="source" value="http://files.cnblogs.com/kiminozo/TabSwitch.xap" /><param name="minRuntimeVersion" value="4.0.50826.0" /><param name="src" value="http://files.cnblogs.com/kiminozo/TabSwitch.xap" /></object>

<p>&nbsp;</p>
<h2 id="TabSwitch控件要点">TabSwitch控件要点</h2>
<ol>
<li>类似横排的单选框组，可以多个选项卡，只能选择一个。</li>
<li>可以点击其中一个选择一个选项，选中后背景图块移动到选中项，背景图块的刷子可以自定义</li>
<li>支持选中事件和选择项的绑定。</li>
<li>为了提高视觉效果，有一个动画过度。</li>
</ol>
<p>&nbsp;</p>
<h2 id="实现控件要点的方法描述">实现控件要点的方法描述</h2>
<p>1 继承ItemsControl控件可以容纳多个Item，并添加TabSwitchItem类</p>
<p>2 图块用一个Rectangle搞定，为了实现移动位置将RenderTransform设置为CompositeTransform。</p>
<p>3 添加一个Selected的event实现选中数据，添加多个SelectItem依赖属性实现绑定。</p>
<p>4 通过选中位置获取相对的X坐标，通过Item长度计算x所在的index，然后应用动画修改CompositeTransform的TranslateX，TranslateX位置设置为index*Item宽度。</p>
<p>5 DoubleAnimation+EasingFunction 的弹簧效果ElasticEase可以实现动画过度。</p>
<p>&nbsp;</p>
<h2 id="完整代码">完整代码</h2>
<p>&nbsp;</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('e72e318b-292a-4897-8d66-b0bd578bd94c')"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""><span class="cnblogs_code_collapse">View Code </span><br><div id="cnblogs_code_open_e72e318b-292a-4897-8d66-b0bd578bd94c" class="cnblogs_code_hide"><br><pre><span style="color: #0000ff;">using</span> System;<br><span style="color: #0000ff;">using</span> System.Collections.Generic;<br><span style="color: #0000ff;">using</span> System.Linq;<br><span style="color: #0000ff;">using</span> System.Net;<br><span style="color: #0000ff;">using</span> System.Windows;<br><span style="color: #0000ff;">using</span> System.Windows.Controls;<br><span style="color: #0000ff;">using</span> System.Windows.Controls.Primitives;<br><span style="color: #0000ff;">using</span> System.Windows.Documents;<br><span style="color: #0000ff;">using</span> System.Windows.Input;<br><span style="color: #0000ff;">using</span> System.Windows.Media;<br><span style="color: #0000ff;">using</span> System.Windows.Media.Animation;<br><span style="color: #0000ff;">using</span> System.Windows.Shapes;<br><br><span style="color: #0000ff;">namespace</span> KiminozoStudio<br>{<br>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> TabSwitchItem : ContentControl<br>    {<br>        <span style="color: #0000ff;">public</span> TabSwitchItem()<br>        {<br>            <span style="color: #0000ff;">this</span>.DefaultStyleKey = <span style="color: #0000ff;">typeof</span>(TabSwitchItem);<br>        }<br>    }<br><br>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> TabSwitch : ItemsControl<br>    {<br>        <span style="color: #0000ff;">#region</span> Propertys<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> DependencyProperty SelectedWidthProperty =<br>            DependencyProperty.Register(<span style="color: #800000;">“</span><span style="color: #800000;">SelectedWidth</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span>(<span style="color: #0000ff;">double</span>), <span style="color: #0000ff;">typeof</span>(TabSwitch),<br>                                        <span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #800080;">65.0</span>, SelectedWidthPropertyChanged));<br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 选中项的宽度<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">double</span> SelectedWidth<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> (<span style="color: #0000ff;">double</span>)GetValue(SelectedWidthProperty); }<br>            <span style="color: #0000ff;">set</span> { SetValue(SelectedWidthProperty, value); }<br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> DependencyProperty SelectedItemProperty =<br>            DependencyProperty.Register(<span style="color: #800000;">“</span><span style="color: #800000;">SelectedItem</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span>(TabSwitchItem), <span style="color: #0000ff;">typeof</span>(TabSwitch),<br>                                        <span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #0000ff;">null</span>));<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 选中的TabSwitchItem控件<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> TabSwitchItem SelectedItem<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> (TabSwitchItem)GetValue(SelectedItemProperty); }<br>            <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">set</span> { SetValue(SelectedItemProperty, value); }<br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> DependencyProperty SelectedValueProperty =<br>            DependencyProperty.Register(<span style="color: #800000;">“</span><span style="color: #800000;">SelectedValue</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span>(<span style="color: #0000ff;">object</span>), <span style="color: #0000ff;">typeof</span>(TabSwitch),<br>                                        <span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #0000ff;">null</span>));<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 选中项的内容值<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">object</span> SelectedValue<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> GetValue(SelectedValueProperty); }<br>            <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">set</span> { SetValue(SelectedValueProperty, value); }<br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> DependencyProperty SelectedIndexProperty =<br>            DependencyProperty.Register(<span style="color: #800000;">“</span><span style="color: #800000;">SelectedIndex</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span>(<span style="color: #0000ff;">int</span>), <span style="color: #0000ff;">typeof</span>(TabSwitch),<br>                                        <span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #800080;">0</span>, SelectedIndexPropertyChanged));<br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 选中项的序号<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> SelectedIndex<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> (<span style="color: #0000ff;">int</span>)GetValue(SelectedIndexProperty); }<br>            <span style="color: #0000ff;">set</span> { SetValue(SelectedIndexProperty, value); }<br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> DependencyProperty SelectedBackgroundProperty =<br>            DependencyProperty.Register(<span style="color: #800000;">“</span><span style="color: #800000;">SelectedBackground</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span>(Brush), <span style="color: #0000ff;">typeof</span>(TabSwitch),<br>                                        <span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #0000ff;">new</span> SolidColorBrush(Colors.Red),<br>                                                             SelectedBackgroundPropertyChanged));<br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 选择项的背景刷子<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> Brush SelectedBackground<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> (Brush)GetValue(SelectedBackgroundProperty); }<br>            <span style="color: #0000ff;">set</span> { SetValue(SelectedBackgroundProperty, value); }<br>        }<br><br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> SelectedBackgroundPropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e)<br>        {<br>            <span style="color: #0000ff;">var</span> sender = o <span style="color: #0000ff;">as</span> TabSwitch;<br>            <span style="color: #0000ff;">if</span> (sender == <span style="color: #0000ff;">null</span> || e.NewValue == e.OldValue) <span style="color: #0000ff;">return</span>;<br>            sender.SetSelectedBackground(e.NewValue <span style="color: #0000ff;">as</span> Brush);<br>        }<br><br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> SelectedIndexPropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e)<br>        {<br>            <span style="color: #0000ff;">var</span> sender = o <span style="color: #0000ff;">as</span> TabSwitch;<br>            <span style="color: #0000ff;">if</span> (sender == <span style="color: #0000ff;">null</span> || e.NewValue == e.OldValue) <span style="color: #0000ff;">return</span>;<br><br>            sender.SetSelectedIndex((<span style="color: #0000ff;">int</span>)e.NewValue);<br>        }<br><br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> SelectedWidthPropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e)<br>        {<br>            <span style="color: #0000ff;">var</span> sender = o <span style="color: #0000ff;">as</span> TabSwitch;<br>            <span style="color: #0000ff;">if</span> (sender == <span style="color: #0000ff;">null</span> || e.NewValue == e.OldValue) <span style="color: #0000ff;">return</span>;<br><br>            sender.SetSelectedWidth((<span style="color: #0000ff;">double</span>)e.NewValue);<br>        }<br>        <span style="color: #0000ff;">#endregion</span><br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 背景的方形<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> Rectangle rectangle;<br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 选中事件<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">event</span> RoutedEventHandler Selected;<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 触发选中事件<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”e”&gt;&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> OnSelected(RoutedEventArgs e)<br>        {<br>            RoutedEventHandler handler = Selected;<br>            <span style="color: #0000ff;">if</span> (handler != <span style="color: #0000ff;">null</span>) handler(<span style="color: #0000ff;">this</span>, e);<br>        }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 改变选中项<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”index”&gt;</span><span style="color: #008000;">索引序号</span><span style="color: #808080;">&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> ChangeSelected(<span style="color: #0000ff;">int</span> index)<br>        {<br>            <span style="color: #0000ff;">if</span> (index &lt; <span style="color: #800080;">0</span> || index &gt; Items.Count) <span style="color: #0000ff;">return</span>;<br>            ;<br>            SelectedIndex = index;<br>            <span style="color: #0000ff;">var</span> switchItem = Items[index] <span style="color: #0000ff;">as</span> TabSwitchItem;<br>            <span style="color: #0000ff;">if</span> (switchItem != <span style="color: #0000ff;">null</span>)<br>            {<br>                SelectedItem = switchItem;<br>                SelectedValue = switchItem.Content;<br>            }<br>            <span style="color: #0000ff;">else</span><br>            {<br>                SelectedValue = Items[index];<br>            }<br>            OnSelected(<span style="color: #0000ff;">new</span> RoutedEventArgs());<br>        }<br><br>        <span style="color: #0000ff;">public</span> TabSwitch()<br>        {<br>            DefaultStyleKey = <span style="color: #0000ff;">typeof</span>(TabSwitch);<br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnApplyTemplate()<br>        {<br>            <span style="color: #0000ff;">base</span>.OnApplyTemplate();<br>            rectangle = (Rectangle)GetTemplateChild(<span style="color: #800000;">“</span><span style="color: #800000;">rectangle</span><span style="color: #800000;">“</span>);<br>            SetSelectedBackground(SelectedBackground);<br>            SetSelectedWidth(SelectedWidth);<br>            SetSelectedIndex(SelectedIndex);<br>        }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 设置选中背景的宽度<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”itemWidth”&gt;&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> SetSelectedWidth(<span style="color: #0000ff;">double</span> itemWidth)<br>        {<br>            <span style="color: #0000ff;">if</span> (rectangle == <span style="color: #0000ff;">null</span>) <span style="color: #0000ff;">return</span>;<br>            rectangle.Width = itemWidth;<br>        }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 设置选中背景的刷子<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”brush”&gt;&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> SetSelectedBackground(Brush brush)<br>        {<br>            <span style="color: #0000ff;">if</span> (rectangle == <span style="color: #0000ff;">null</span>) <span style="color: #0000ff;">return</span>;<br>            rectangle.Fill = brush;<br>        }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 设置选中的项目<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”index”&gt;</span><span style="color: #008000;">索引序号</span><span style="color: #808080;">&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> SetSelectedIndex(<span style="color: #0000ff;">int</span> index)<br>        {<br>            <span style="color: #0000ff;">if</span> (rectangle == <span style="color: #0000ff;">null</span>) <span style="color: #0000ff;">return</span>;<br>            <span style="color: #0000ff;">if</span> (index &lt; <span style="color: #800080;">0</span> || index &gt; Items.Count) <span style="color: #0000ff;">return</span>;<br><br>            <span style="color: #0000ff;">double</span> x = SelectedWidth <em> index;<br>            <span style="color: #0000ff;">var</span> compositeTransform = (CompositeTransform)rectangle.RenderTransform;<br>            <span style="color: #0000ff;">if</span> (Math.Abs(compositeTransform.TranslateX - x) &gt; <span style="color: #800080;">1</span>)<br>                compositeTransform.TranslateX = SelectedWidth </em> index;<br>        }<br><br><span style="color: #0000ff;">#if</span> SILVERLIGHT<br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 重写鼠标左键放开事件<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”e”&gt;&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnMouseLeftButtonUp(MouseButtonEventArgs e)<br>        {<br>            Point point = e.GetPosition(<span style="color: #0000ff;">this</span>);<br>            <span style="color: #0000ff;">var</span> x = (<span style="color: #0000ff;">int</span>)(point.X / SelectedWidth) <em> SelectedWidth;<br>            <span style="color: #0000ff;">int</span> index = (<span style="color: #0000ff;">int</span>)(x / SelectedWidth);<br>            ShowAnimation(x);<br>            ChangeSelected(index);<br><br>            <span style="color: #0000ff;">base</span>.OnMouseLeftButtonUp(e);<br>        }<br><br><span style="color: #0000ff;">#else</span><br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 重写触摸点中事件<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”e”&gt;&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnTap(GestureEventArgs e)<br>        {<br>            Point point = e.GetPosition(<span style="color: #0000ff;">this</span>);<br><br>            <span style="color: #0000ff;">var</span> x = (<span style="color: #0000ff;">int</span>) (point.X/SelectedWidth)</em>SelectedWidth;<br>            <span style="color: #0000ff;">int</span> index = (<span style="color: #0000ff;">int</span>) (x/SelectedWidth);<br>            ShowAnimation(x);<br>            ChangeSelected(index);<br>            <span style="color: #0000ff;">base</span>.OnTap(e);<br>        }<br><span style="color: #0000ff;">#endif</span><br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 选中后的动画<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”x”&gt;&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> ShowAnimation(<span style="color: #0000ff;">double</span> x)<br>        {<br>            <span style="color: #008000;">//</span><span style="color: #008000;">移动X坐标，并使用EasingFunction的弹簧特效</span><span style="color: #008000;"><br></span>            <span style="color: #0000ff;">var</span> animation = <span style="color: #0000ff;">new</span> DoubleAnimation<br>                                {<br>                                    Duration = <span style="color: #0000ff;">new</span> Duration(<span style="color: #0000ff;">new</span> TimeSpan(<span style="color: #800080;">0</span>, <span style="color: #800080;">0</span>, <span style="color: #800080;">0</span>, <span style="color: #800080;">0</span>, <span style="color: #800080;">500</span>)),<br>                                    To = x,<br>                                    EasingFunction =<br>                                        <span style="color: #0000ff;">new</span> ElasticEase { EasingMode = EasingMode.EaseOut, Oscillations = <span style="color: #800080;">1</span>, Springiness = <span style="color: #800080;">5</span> }<br>                                };<br>            Storyboard.SetTarget(animation, rectangle);<br>            Storyboard.SetTargetProperty(animation, <span style="color: #0000ff;">new</span> PropertyPath(<span style="color: #800000;">“</span><span style="color: #800000;">(UIElement.RenderTransform).(CompositeTransform.TranslateX)</span><span style="color: #800000;">“</span>));<br>            <span style="color: #0000ff;">var</span> storyboard = <span style="color: #0000ff;">new</span> Storyboard();<br>            storyboard.Children.Add(animation);<br>            storyboard.Begin();<br>        }<br>    }<br>}</pre><br></div><br></div>

<p>&nbsp;</p>
<p>对应的Generic.xaml</p>
<p>&nbsp;</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('64a5d21f-23e3-47e3-b075-41c8f087ccbb')"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""><span class="cnblogs_code_collapse">View Code </span><br><div id="cnblogs_code_open_64a5d21f-23e3-47e3-b075-41c8f087ccbb" class="cnblogs_code_hide"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ResourceDictionary<br>    </span><span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">=”<a href="http://schemas.microsoft.com/winfx/2006/xaml/presentation" target="_blank">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>“</span><span style="color: #ff0000;"><br>    xmlns:x</span><span style="color: #0000ff;">=”<a href="http://schemas.microsoft.com/winfx/2006/xaml" target="_blank">http://schemas.microsoft.com/winfx/2006/xaml</a>“</span><span style="color: #ff0000;"><br>    xmlns:local</span><span style="color: #0000ff;">=”clr-namespace:KiminozoStudio”</span><span style="color: #0000ff;">&gt;</span><br><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Style </span><span style="color: #ff0000;">TargetType</span><span style="color: #0000ff;">=”local:TabSwitch”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”Width”</span><span style="color: #ff0000;"> Value</span><span style="color: #0000ff;">=”400”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”Height”</span><span style="color: #ff0000;"> Value</span><span style="color: #0000ff;">=”50”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”ItemsPanel”</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter.Value</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ItemsPanelTemplate</span><span style="color: #0000ff;">&gt;</span><br>                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">StackPanel </span><span style="color: #ff0000;">Orientation</span><span style="color: #0000ff;">=”Horizontal”</span> <span style="color: #0000ff;">/&gt;</span><br>                <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ItemsPanelTemplate</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Setter.Value</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Setter</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”Template”</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter.Value</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ControlTemplate </span><span style="color: #ff0000;">TargetType</span><span style="color: #0000ff;">=”local:TabSwitch”</span><span style="color: #0000ff;">&gt;</span><br>                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Grid</span><span style="color: #0000ff;">&gt;</span><br>                        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Rectangle </span><span style="color: #ff0000;">x:Name</span><span style="color: #0000ff;">=”rectangle”</span><span style="color: #ff0000;"> Width</span><span style="color: #0000ff;">=”65”</span><span style="color: #ff0000;"> Height</span><span style="color: #0000ff;">=”40”</span><span style="color: #ff0000;"> RadiusY</span><span style="color: #0000ff;">=”5”</span><span style="color: #ff0000;"> RadiusX</span><span style="color: #0000ff;">=”5”</span><span style="color: #ff0000;"><br>                                Fill</span><span style="color: #0000ff;">=”Red”</span><span style="color: #ff0000;"> HorizontalAlignment</span><span style="color: #0000ff;">=”Left”</span><span style="color: #0000ff;">&gt;</span><br>                            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Rectangle.RenderTransform</span><span style="color: #0000ff;">&gt;</span><br>                                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">CompositeTransform</span><span style="color: #0000ff;">/&gt;</span><br>                            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Rectangle.RenderTransform</span><span style="color: #0000ff;">&gt;</span><br>                        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Rectangle</span><span style="color: #0000ff;">&gt;</span><br>                        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ItemsPresenter</span><span style="color: #0000ff;">/&gt;</span><br>                    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Grid</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ControlTemplate</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Setter.Value</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Setter</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Style</span><span style="color: #0000ff;">&gt;</span><br><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Style </span><span style="color: #ff0000;">TargetType</span><span style="color: #0000ff;">=”local:TabSwitchItem”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”Width”</span><span style="color: #ff0000;"> Value</span><span style="color: #0000ff;">=”65”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”Height”</span><span style="color: #ff0000;"> Value</span><span style="color: #0000ff;">=”40”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”Margin”</span><span style="color: #ff0000;"> Value</span><span style="color: #0000ff;">=”0,10,0,3”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”Template”</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter.Value</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ControlTemplate </span><span style="color: #ff0000;">TargetType</span><span style="color: #0000ff;">=”local:TabSwitchItem”</span><span style="color: #0000ff;">&gt;</span><br>                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">TextBlock </span><span style="color: #ff0000;">Text</span><span style="color: #0000ff;">=”</span><span style="color: #808000;">{TemplateBinding Content}</span><span style="color: #0000ff;">“</span><span style="color: #ff0000;"> TextAlignment</span><span style="color: #0000ff;">=”Center”</span> <span style="color: #0000ff;">/&gt;</span><br>                <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ControlTemplate</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Setter.Value</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Setter</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Style</span><span style="color: #0000ff;">&gt;</span><br><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ResourceDictionary</span><span style="color: #0000ff;">&gt;</span></pre><br></div><br></div>

<p>&nbsp;</p>
<p>测试代码：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">my:TabSwitch </span><span style="color: #ff0000;">Height</span><span style="color: #0000ff;">=”56”</span><span style="color: #ff0000;"> HorizontalAlignment</span><span style="color: #0000ff;">=”Left”</span><span style="color: #ff0000;"> Margin</span><span style="color: #0000ff;">=”52,21,0,0”</span><span style="color: #ff0000;"> x:Name</span><span style="color: #0000ff;">=”tabSwitch1”</span><span style="color: #ff0000;"> VerticalAlignment</span><span style="color: #0000ff;">=”Top”</span><span style="color: #ff0000;"> Width</span><span style="color: #0000ff;">=”349”</span><span style="color: #ff0000;"> d:IsHidden</span><span style="color: #0000ff;">=”True”</span><span style="color: #ff0000;"> FontSize</span><span style="color: #0000ff;">=”16”</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">my:TabSwitchItem </span><span style="color: #ff0000;">Content</span><span style="color: #0000ff;">=”选项1”</span><span style="color: #0000ff;">/&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">my:TabSwitchItem </span><span style="color: #ff0000;">Content</span><span style="color: #0000ff;">=”选项2”</span><span style="color: #0000ff;">/&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">my:TabSwitchItem </span><span style="color: #ff0000;">Content</span><span style="color: #0000ff;">=”选项3”</span><span style="color: #0000ff;">/&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">my:TabSwitchItem </span><span style="color: #ff0000;">Content</span><span style="color: #0000ff;">=”选项4”</span><span style="color: #0000ff;">/&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">my:TabSwitchItem </span><span style="color: #ff0000;">Content</span><span style="color: #0000ff;">=”选项5”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">my:TabSwitch</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>&nbsp;</p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[模拟Windows phone 开始菜单的瓦片动画]]></title>
    <link href="http://yoursite.com/2012/03/12/%E6%A8%A1%E6%8B%9Fwindows-phone-%E5%BC%80%E5%A7%8B%E8%8F%9C%E5%8D%95%E7%9A%84%E7%93%A6%E7%89%87%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2012/03/12/模拟windows-phone-开始菜单的瓦片动画/</id>
    <published>2012-03-12T00:33:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<object width="640" height="480" data="http://files.cnblogs.com/kiminozo/WpAmine.xap" type="application/x-silverlight-2"><param name="source" value="http://files.cnblogs.com/kiminozo/WpAmine.xap" /><param name="minRuntimeVersion" value="4.0.50826.0" /><param name="src" value="http://files.cnblogs.com/kiminozo/WpAmine.xap" /></object>

<p>用SL4模拟的4种效果，ForwardOut可以选中，这个只是一个Demo 正在考虑移植到NavigationInTransition成为页面动画。</p>
<p>直接放代码包下：</p>
<p><a href="http://files.cnblogs.com/kiminozo/WpAmine.rar" target="_blank">http://files.cnblogs.com/kiminozo/WpAmine.rar</a></p>
<p>大部分代码都参考了：</p>
<p><a href="http://blogs.claritycon.com/kevinmarshall/2010/10/13/wp7-page-transitions-sample/" target="_blank">http://blogs.claritycon.com/kevinmarshall/2010/10/13/wp7-page-transitions-sample/</a>&nbsp;中的列表动画。</p>
<p>原理是利用各个Item的时间差，这里经过我改造变成了开始菜单。&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WP7自定义控件 评分控件]]></title>
    <link href="http://yoursite.com/2012/03/11/wp7%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E8%AF%84%E5%88%86%E6%8E%A7%E4%BB%B6/"/>
    <id>http://yoursite.com/2012/03/11/wp7自定义控件-评分控件/</id>
    <published>2012-03-11T03:57:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>最近在写一个新的APP程序，需要使用评分功能，WP的Toolkit里面没有包含，只能自己写一个了。</p>
<p>&nbsp;</p>
<h2 id="评分控件要点">评分控件要点</h2>
<p>评分控件已经很熟悉了，还是总结一下要点。</p>
<ol>
<li>由10个（可配置）横排的五星组成，默认非高亮色（灰色）</li>
<li>得分由从左到右高亮（如红色，颜色可配置）显示得分数量的五星，控件能够提供获取和设置得分的属性。</li>
<li>可以点击其中一个五星修改评分。</li>
<li>为了提高触摸体验，支持拖动控件修改得分</li>
</ol>
<p>&nbsp;</p>
<h2 id="根据要点设计控件">根据要点设计控件</h2>
<h3 id="根据要点1设计控件布局">根据要点1设计控件布局</h3>
<p>Horizontal排列的StackPanel（包含在ItemsControl 控件内部） 和 绘制五星的Path 组成。</p>
<p>最上面提供一个透明的Rectangle扩展触摸空间（WP只能在绘制的控件上触摸）。</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ItemsControl </span><span style="color: #ff0000;">x:Name</span><span style="color: #0000ff;">=”stars”</span><span style="color: #0000ff;">&gt;</span><br>                            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ItemsControl.ItemsPanel</span><span style="color: #0000ff;">&gt;</span><br>                                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ItemsPanelTemplate</span><span style="color: #0000ff;">&gt;</span><br>                                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">StackPanel </span><span style="color: #ff0000;">Orientation</span><span style="color: #0000ff;">=”Horizontal”</span> <span style="color: #0000ff;">/&gt;</span><br>                                <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ItemsPanelTemplate</span><span style="color: #0000ff;">&gt;</span><br>                            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ItemsControl.ItemsPanel</span><span style="color: #0000ff;">&gt;</span><br>                            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ItemsControl.ItemTemplate</span><span style="color: #0000ff;">&gt;</span><br>                                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">DataTemplate</span><span style="color: #0000ff;">&gt;</span><br>                                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Path </span><span style="color: #ff0000;">Data</span><span style="color: #0000ff;">=”M16,0 L19.77688,12.223213 L32.000001,12.222913 L22.111121,19.776973 L25.888544,32.000001 L16,24.445454 L6.1114563,32.000001 L9.88888,19.776973 L2.2971745E-08,12.222913 L12.22312,12.223213 z”</span><span style="color: #ff0000;"><br>                              Fill</span><span style="color: #0000ff;">=”</span><span style="color: #808000;">{Binding Fill}</span><span style="color: #0000ff;">“</span><span style="color: #ff0000;"> HorizontalAlignment</span><span style="color: #0000ff;">=”Left”</span><span style="color: #ff0000;"> Height</span><span style="color: #0000ff;">=”32”</span><span style="color: #ff0000;"> Margin</span><span style="color: #0000ff;">=”1,0”</span><span style="color: #ff0000;"> Width</span><span style="color: #0000ff;">=”32”</span><span style="color: #ff0000;"><br>                              Stretch</span><span style="color: #0000ff;">=”Fill”</span><span style="color: #ff0000;"> VerticalAlignment</span><span style="color: #0000ff;">=”Top”</span> <span style="color: #0000ff;">/&gt;</span><br>                                <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">DataTemplate</span><span style="color: #0000ff;">&gt;</span><br>                            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ItemsControl.ItemTemplate</span><span style="color: #0000ff;">&gt;</span><br>                        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ItemsControl</span><span style="color: #0000ff;">&gt;</span><br>                        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Rectangle </span><span style="color: #ff0000;">Fill</span><span style="color: #0000ff;">=”#00000000”</span><span style="color: #0000ff;">/&gt;</span></pre><br></div>

<h3 id="根据要点1、2设计控件属性">根据要点1、2设计控件属性</h3>
<p>Brush MarkedFill&nbsp; 选中了的五星刷子</p>
<p>Brush UnMarkedFill 未选中的五星刷子</p>
<p>int MaxStars 最大五星数量</p>
<p>Marked 当前评价值</p>
<p>&nbsp;</p>
<h3 id="根据要点2设计控件属性改变行为">根据要点2设计控件属性改变行为</h3>
<p>很简单获取Marked 然后将每个五星都修改一下颜色</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> FillStars(<span style="color: #0000ff;">int</span> index)<br>        {<br>            <span style="color: #0000ff;">if</span> (!VerifyValue(index)) <span style="color: #0000ff;">return</span>;<br><br>            <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>, length = starItems.Count; i &lt; length; i++)<br>            {<br>                <span style="color: #0000ff;">var</span> star = starItems[i];<br>                <span style="color: #0000ff;">if</span> (i &gt; index)<br>                {<br>                    star.Fill = UnMarkedFill;<br>                }<br>                <span style="color: #0000ff;">else</span><br>                {<br>                    star.Fill = MarkedFill;<br>                }<br>            }<br><br>        }</pre><br></div>

<h2 id="根据要点3、4设计控件触控行为">根据要点3、4设计控件触控行为</h2>
<p>将2个要点合并了，实现方法为：</p>
<ul>
<li>滑动前（点中）： 修改为当前X轴的高亮位置</li>
<li>滑动中：根据X轴变化高亮位置</li>
<li>滑动完成（放开）： 修改为当前X轴的高亮位置，并更新评分Marked 当前评价值</li>
</ul>
<p>通过五星的宽度可以获取X轴所在的五星</p>
<p>代码如下：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnManipulationStarted(ManipulationStartedEventArgs e)<br>        {<br>            e.Handled = <span style="color: #0000ff;">true</span>;<br>            UpdateStar(e.ManipulationOrigin);<br>            <span style="color: #0000ff;">base</span>.OnManipulationStarted(e);<br>        }<br><br>        <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnManipulationDelta(ManipulationDeltaEventArgs e)<br>        {<br>            e.Handled = <span style="color: #0000ff;">true</span>;<br>            UpdateStar(e.ManipulationOrigin);<br>            <span style="color: #0000ff;">base</span>.OnManipulationDelta(e);<br>        }<br><br>        <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnManipulationCompleted(ManipulationCompletedEventArgs e)<br>        {<br>            e.Handled = <span style="color: #0000ff;">true</span>;<br>            <span style="color: #0000ff;">var</span> index = UpdateStar(e.ManipulationOrigin);<br>            <span style="color: #0000ff;">if</span> (VerifyValue(index)) { Marked = index + <span style="color: #800080;">1</span>; }<br>            <span style="color: #0000ff;">base</span>.OnManipulationCompleted(e);<br>        }</pre><br></div>

<p>&nbsp;</p>
<h2 id="完整代码">完整代码</h2>
<p>&nbsp;</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('6cebecfd-2ad6-447f-9e03-ac2db0cb4779')"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""><span class="cnblogs_code_collapse">View Code </span><br><div id="cnblogs_code_open_6cebecfd-2ad6-447f-9e03-ac2db0cb4779" class="cnblogs_code_hide"><br><pre><span style="color: #0000ff;">using</span> System.Collections.ObjectModel;<br><span style="color: #0000ff;">using</span> System.ComponentModel;<br><span style="color: #0000ff;">using</span> System.Diagnostics;<br><span style="color: #0000ff;">using</span> System.Windows;<br><span style="color: #0000ff;">using</span> System.Windows.Controls;<br><span style="color: #0000ff;">using</span> System.Windows.Input;<br><span style="color: #0000ff;">using</span> System.Windows.Media;<br><br><span style="color: #0000ff;">namespace</span> KimiStudio.Controls<br>{<br>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> StarMark : Control<br>    {<br>        <span style="color: #0000ff;">private</span> ItemsControl stars;<br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">int</span> StarSize = <span style="color: #800080;">34</span>;<br>        <span style="color: #0000ff;">private</span> ObservableCollection&lt;StarItem&gt; starItems;<br><br>        <span style="color: #0000ff;">#region</span> DependencyPropertys<br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> DependencyProperty MarkedFillProperty =<br>           DependencyProperty.Register(<span style="color: #800000;">“</span><span style="color: #800000;">MarkedFill</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span>(Brush), <span style="color: #0000ff;">typeof</span>(StarMark),<br>           <span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #0000ff;">new</span> SolidColorBrush(Colors.Red)));<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> DependencyProperty UnMarkedFillProperty =<br>            DependencyProperty.Register(<span style="color: #800000;">“</span><span style="color: #800000;">UnMarkedFill</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span>(Brush), <span style="color: #0000ff;">typeof</span>(StarMark),<br>            <span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #0000ff;">new</span> SolidColorBrush(Colors.DarkGray)));<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> DependencyProperty MaxStarsProperty =<br>            DependencyProperty.Register(<span style="color: #800000;">“</span><span style="color: #800000;">MaxStars</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span>(<span style="color: #0000ff;">int</span>), <span style="color: #0000ff;">typeof</span>(StarMark),<br>            <span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #800080;">10</span>));<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> DependencyProperty MarkedProperty =<br>            DependencyProperty.Register(<span style="color: #800000;">“</span><span style="color: #800000;">Marked</span><span style="color: #800000;">“</span>, <span style="color: #0000ff;">typeof</span>(<span style="color: #0000ff;">int</span>), <span style="color: #0000ff;">typeof</span>(StarMark),<br>            <span style="color: #0000ff;">new</span> PropertyMetadata(<span style="color: #800080;">0</span>, OnMarkedPropertyChanged));<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> Marked<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> (<span style="color: #0000ff;">int</span>)GetValue(MarkedProperty); }<br>            <span style="color: #0000ff;">set</span> { SetValue(MarkedProperty, value); }<br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> MaxStars<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> (<span style="color: #0000ff;">int</span>)GetValue(MaxStarsProperty); }<br>            <span style="color: #0000ff;">set</span> { SetValue(MaxStarsProperty, value); }<br>        }<br><br>        <span style="color: #0000ff;">public</span> Brush UnMarkedFill<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> (Brush)GetValue(UnMarkedFillProperty); }<br>            <span style="color: #0000ff;">set</span> { SetValue(UnMarkedFillProperty, value); }<br>        }<br><br>        <span style="color: #0000ff;">public</span> Brush MarkedFill<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> (Brush)GetValue(MarkedFillProperty); }<br>            <span style="color: #0000ff;">set</span> { SetValue(MarkedFillProperty, value); }<br>        }<br><br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> OnMarkedPropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs args)<br>        {<br>            <span style="color: #0000ff;">var</span> starMark = o <span style="color: #0000ff;">as</span> StarMark;<br>            <span style="color: #0000ff;">if</span> (starMark == <span style="color: #0000ff;">null</span> || args.NewValue == args.OldValue) <span style="color: #0000ff;">return</span>;<br><br>            starMark.SetMarked((<span style="color: #0000ff;">int</span>)args.NewValue);<br>        }<br><br>        <span style="color: #0000ff;">#endregion</span><br><br>        <span style="color: #0000ff;">public</span> StarMark()<br>        {<br>            <span style="color: #0000ff;">this</span>.DefaultStyleKey = <span style="color: #0000ff;">typeof</span>(StarMark);<br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnApplyTemplate()<br>        {<br>            <span style="color: #0000ff;">base</span>.OnApplyTemplate();<br>            stars = (ItemsControl)GetTemplateChild(<span style="color: #800000;">“</span><span style="color: #800000;">stars</span><span style="color: #800000;">“</span>);<br><br>            starItems = <span style="color: #0000ff;">new</span> ObservableCollection&lt;StarItem&gt;();<br>            <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>, length = MaxStars; i &lt; length; i++)<br>            {<br>                starItems.Add(<span style="color: #0000ff;">new</span> StarItem { Fill = UnMarkedFill });<br>            }<br>            stars.ItemsSource = starItems;<br>            SetMarked(Marked);<br>        }<br><br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> SetMarked(<span style="color: #0000ff;">int</span> value)<br>        {<br>            <span style="color: #0000ff;">if</span> (stars == <span style="color: #0000ff;">null</span>) <span style="color: #0000ff;">return</span>; ;<br>            FillStars(value - <span style="color: #800080;">1</span>);<br>        }<br><br>        <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnManipulationStarted(ManipulationStartedEventArgs e)<br>        {<br>            e.Handled = <span style="color: #0000ff;">true</span>;<br>            UpdateStar(e.ManipulationOrigin);<br>            <span style="color: #0000ff;">base</span>.OnManipulationStarted(e);<br>        }<br><br>        <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnManipulationDelta(ManipulationDeltaEventArgs e)<br>        {<br>            e.Handled = <span style="color: #0000ff;">true</span>;<br>            UpdateStar(e.ManipulationOrigin);<br>            <span style="color: #0000ff;">base</span>.OnManipulationDelta(e);<br>        }<br><br>        <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnManipulationCompleted(ManipulationCompletedEventArgs e)<br>        {<br>            e.Handled = <span style="color: #0000ff;">true</span>;<br>            <span style="color: #0000ff;">var</span> index = UpdateStar(e.ManipulationOrigin);<br>            <span style="color: #0000ff;">if</span> (VerifyValue(index)) { Marked = index + <span style="color: #800080;">1</span>; }<br>            <span style="color: #0000ff;">base</span>.OnManipulationCompleted(e);<br>        }<br><br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> UpdateStar(Point point)<br>        {<br>            <span style="color: #0000ff;">int</span> x = (<span style="color: #0000ff;">int</span>)point.X;<br>            <span style="color: #0000ff;">int</span> index = x / StarSize;<br>            FillStars(index);<br>            <span style="color: #0000ff;">return</span> index;<br>        }<br><br>        <span style="color: #008000;">//</span><span style="color: #008000;">SL可用<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;">protected override void OnMouseLeftButtonUp(MouseButtonEventArgs e)<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;">{<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;">    int x = (int)e.GetPosition(stars).X;<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;">    int index = x / StarSize;<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;">    FillStars(index);<br><br>        </span><span style="color: #008000;">//</span><span style="color: #008000;">    if (VerifyValue(index)) { Marked = index + 1; }<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;">    base.OnMouseLeftButtonUp(e);<br>        </span><span style="color: #008000;">//</span><span style="color: #008000;">}</span><span style="color: #008000;"><br></span><br><br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">bool</span> VerifyValue(<span style="color: #0000ff;">int</span> index)<br>        {<br>            <span style="color: #0000ff;">if</span> (index &lt; <span style="color: #800080;">0</span> || index &gt;= stars.Items.Count) <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span>;<br>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">true</span>;<br>        }<br><br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> FillStars(<span style="color: #0000ff;">int</span> index)<br>        {<br>            <span style="color: #0000ff;">if</span> (!VerifyValue(index)) <span style="color: #0000ff;">return</span>;<br><br>            <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>, length = starItems.Count; i &lt; length; i++)<br>            {<br>                <span style="color: #0000ff;">var</span> star = starItems[i];<br>                <span style="color: #0000ff;">if</span> (i &gt; index)<br>                {<br>                    star.Fill = UnMarkedFill;<br>                }<br>                <span style="color: #0000ff;">else</span><br>                {<br>                    star.Fill = MarkedFill;<br>                }<br>            }<br><br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> StarItem : INotifyPropertyChanged<br>        {<br>            <span style="color: #0000ff;">private</span> Brush fill;<br><br>            <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">event</span> PropertyChangedEventHandler PropertyChanged;<br><br>            <span style="color: #0000ff;">public</span> Brush Fill<br>            {<br>                <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> fill; }<br>                <span style="color: #0000ff;">set</span><br>                {<br>                    <span style="color: #0000ff;">if</span> (fill == value) <span style="color: #0000ff;">return</span>;<br>                    fill = value;<br>                    OnPropertyChanged(<span style="color: #800000;">“</span><span style="color: #800000;">Fill</span><span style="color: #800000;">“</span>);<br>                }<br>            }<br><br>            <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> OnPropertyChanged(<span style="color: #0000ff;">string</span> propertyName)<br>            {<br>                <span style="color: #0000ff;">var</span> handler = PropertyChanged;<br>                <span style="color: #0000ff;">if</span> (handler == <span style="color: #0000ff;">null</span>) <span style="color: #0000ff;">return</span>;<br>                handler(<span style="color: #0000ff;">this</span>, <span style="color: #0000ff;">new</span> PropertyChangedEventArgs(propertyName));<br>            }<br>        }<br>    }<br>}</pre><br></div><br></div>

<p>对应的Generic.xaml</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('305c9c41-625d-42a8-b335-4d105b5fb722')"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""><span class="cnblogs_code_collapse">View Code </span><br><div id="cnblogs_code_open_305c9c41-625d-42a8-b335-4d105b5fb722" class="cnblogs_code_hide"><br><pre> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Style </span><span style="color: #ff0000;">TargetType</span><span style="color: #0000ff;">=”local:StarMark”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”Width”</span><span style="color: #ff0000;"> Value</span><span style="color: #0000ff;">=”340”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”Height”</span><span style="color: #ff0000;"> Value</span><span style="color: #0000ff;">=”35”</span><span style="color: #0000ff;">/&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter </span><span style="color: #ff0000;">Property</span><span style="color: #0000ff;">=”Template”</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Setter.Value</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ControlTemplate </span><span style="color: #ff0000;">TargetType</span><span style="color: #0000ff;">=”local:StarMark”</span><span style="color: #0000ff;">&gt;</span><br>                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Grid</span><span style="color: #0000ff;">&gt;</span><br>                        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ItemsControl </span><span style="color: #ff0000;">x:Name</span><span style="color: #0000ff;">=”stars”</span><span style="color: #0000ff;">&gt;</span><br>                            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ItemsControl.ItemsPanel</span><span style="color: #0000ff;">&gt;</span><br>                                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ItemsPanelTemplate</span><span style="color: #0000ff;">&gt;</span><br>                                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">StackPanel </span><span style="color: #ff0000;">Orientation</span><span style="color: #0000ff;">=”Horizontal”</span> <span style="color: #0000ff;">/&gt;</span><br>                                <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ItemsPanelTemplate</span><span style="color: #0000ff;">&gt;</span><br>                            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ItemsControl.ItemsPanel</span><span style="color: #0000ff;">&gt;</span><br>                            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ItemsControl.ItemTemplate</span><span style="color: #0000ff;">&gt;</span><br>                                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">DataTemplate</span><span style="color: #0000ff;">&gt;</span><br>                                    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Path </span><span style="color: #ff0000;">Data</span><span style="color: #0000ff;">=”M16,0 L19.77688,12.223213 L32.000001,12.222913 L22.111121,19.776973 L25.888544,32.000001 L16,24.445454 L6.1114563,32.000001 L9.88888,19.776973 L2.2971745E-08,12.222913 L12.22312,12.223213 z”</span><span style="color: #ff0000;"><br>                              Fill</span><span style="color: #0000ff;">=”</span><span style="color: #808000;">{Binding Fill}</span><span style="color: #0000ff;">“</span><span style="color: #ff0000;"> HorizontalAlignment</span><span style="color: #0000ff;">=”Left”</span><span style="color: #ff0000;"> Height</span><span style="color: #0000ff;">=”32”</span><span style="color: #ff0000;"> Margin</span><span style="color: #0000ff;">=”1,0”</span><span style="color: #ff0000;"> Width</span><span style="color: #0000ff;">=”32”</span><span style="color: #ff0000;"><br>                              Stretch</span><span style="color: #0000ff;">=”Fill”</span><span style="color: #ff0000;"> VerticalAlignment</span><span style="color: #0000ff;">=”Top”</span> <span style="color: #0000ff;">/&gt;</span><br>                                <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">DataTemplate</span><span style="color: #0000ff;">&gt;</span><br>                            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ItemsControl.ItemTemplate</span><span style="color: #0000ff;">&gt;</span><br>                        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ItemsControl</span><span style="color: #0000ff;">&gt;</span><br>                        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">Rectangle </span><span style="color: #ff0000;">Fill</span><span style="color: #0000ff;">=”#00000000”</span><span style="color: #0000ff;">/&gt;</span><br>                    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Grid</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ControlTemplate</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Setter.Value</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Setter</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">Style</span><span style="color: #0000ff;">&gt;</span></pre><br></div><br></div>

<p>&nbsp;</p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WP7应用开发笔记 TiltEffect为控件添加倾斜的触控响应效果]]></title>
    <link href="http://yoursite.com/2012/03/05/wp7%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0-tilteffect%E4%B8%BA%E6%8E%A7%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%80%BE%E6%96%9C%E7%9A%84%E8%A7%A6%E6%8E%A7%E5%93%8D%E5%BA%94%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2012/03/05/wp7应用开发笔记-tilteffect为控件添加倾斜的触控响应效果/</id>
    <published>2012-03-04T17:34:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>写篇短博客的称赞一下 slToolkit 里的TiltEffect。</p>
<p>在触控界面设计里面，对触控的响应是非常重要的，点击后控件作出一定的倾斜响应效果，有助于提高体验。</p>
<p>在Silverlight里面有xyz的倾斜轴可以自己实现这个效果。&nbsp;</p>
<p>不过 Toolkit更简单只要在容器里面添加附加属性 slToolkit:TiltEffect.IsTiltEnabled=”True” &nbsp;就OK了。</p>
<p>太强大了，我不得不佩服一下。&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从FLC中学习的设计模式系列-结构型模式(3)-享元模式]]></title>
    <link href="http://yoursite.com/2012/02/29/%E4%BB%8Eflc%E4%B8%AD%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F3-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2012/02/29/从flc中学习的设计模式系列-结构型模式3-享元模式/</id>
    <published>2012-02-29T05:43:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>享元模式是使用共享部件减少内存占用</p>
<p>&nbsp;</p>
<h2 id="享元模式">享元模式</h2>
<p><a href="http://zh.wikipedia.org/wiki/享元模式" title="http://zh.wikipedia.org/wiki/享元模式" target="_blank">http://zh.wikipedia.org/wiki/享元模式</a></p>
<p>享元模式（英语：Flyweight Pattern）是一种软件设计模式。它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；它适合用于当大量物件只是重复因而导致无法令人接受的使用大量内存。通常物件中的部分状态是可以分享。常见做法是把它们放在外部数据结构，当需要使用时再将它们传递给享元。</p>
<p>典型的享元模式的例子为文书处理器中以图形结构来表示字符。一个做法是，每个字形有其字型外观, 字模 metrics, 和其它格式资讯，但这会使每个字符就耗用上千字节。取而代之的是，每个字符参照到一个共享字形物件，此物件会被其它有共同特质的字符所分享；只有每个字符（文件中或页面中）的位置才需要另外储存。</p>
<p>&nbsp;</p>
<p>FCL中的享元模式</p>
<p>在绘图时常有的Brushes和Pens的各个公共属性都是享元模式的典型。</p>
<p>注意虽然Colors类似，但Color是结构，不存在共享，所以不是享元模式</p>
<p>&nbsp;</p>
<p>就拿Brushes类举例：</p>
<p>&nbsp;</p>
<p>Brushes 类<br>实现一组预定义的 <a href="http://127.0.0.1:47873/help/1-5500/ms.help?method=page&amp;id=T%3ASYSTEM.WINDOWS.MEDIA.SOLIDCOLORBRUSH&amp;product=VS&amp;productVersion=100&amp;topicVersion=100&amp;locale=ZH-CN&amp;topicLocale=ZH-CN&amp;embedded=true" target="_blank">SolidColorBrush</a> 对象。</p>
<p>属性有一大堆：颜色名如：<br> AliceBlue 获取具有十六进制值 #FFF0F8FF 的纯色填充颜色。&nbsp;<br> AntiqueWhite 获取具有十六进制值 #FFFAEBD7 的纯色填充颜色。&nbsp;<br> Aqua 获取具有十六进制值 #FF00FFFF 的纯色填充颜色。&nbsp;<br> Aquamarine 获取具有十六进制值 #FF7FFFD4 的纯色填充颜色。&nbsp;<br> Azure 获取具有十六进制值 #FFF0FFFF 的纯色填充颜色。&nbsp;<br> Beige 获取具有十六进制值 #FFF5F5DC 的纯色填充颜色。&nbsp;<br> Bisque 获取具有十六进制值 #FFFFE4C4 的纯色填充颜色。&nbsp;<br> Black 获取具有十六进制值 #FF000000 的纯色填充颜色。</p>
<p>…</p>
<p>&nbsp;</p>
<p>下面来看看怎么使用享元</p>
<p>假设有N个glyphs图形，需要让他们都成为黑色Black：</p>
<p>&nbsp;</p>
<pre class="brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;">glyphs1.Fill = new SolidColorBrush(Colors.Black );

glyphs2.Fill = new SolidColorBrush(Colors.Black );

glyphs3.Fill = new SolidColorBrush(Colors.Black );

..

glyphsN.Fill = new SolidColorBrush(Colors.Black );</pre>

<p>&nbsp;</p>
<p>发现SolidColorBrush严重浪费内存，使用Brushes 提供的Black共享SolidColorBrush,修改后如下：</p>
<pre class="brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;">glyphs1.Fill = SolidColorBrush.Black;

glyphs2.Fill = SolidColorBrush.Black;

glyphs3.Fill = SolidColorBrush.Black;

..

glyphsN.Fill = SolidColorBrush.Black;</pre>]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WP7应用开发笔记 继承BitmapSource并使用独立存储来缓存远程的图片]]></title>
    <link href="http://yoursite.com/2012/02/28/wp7%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0-%E7%BB%A7%E6%89%BFbitmapsource%E5%B9%B6%E4%BD%BF%E7%94%A8%E7%8B%AC%E7%AB%8B%E5%AD%98%E5%82%A8%E6%9D%A5%E7%BC%93%E5%AD%98%E8%BF%9C%E7%A8%8B/"/>
    <id>http://yoursite.com/2012/02/28/wp7应用开发笔记-继承bitmapsource并使用独立存储来缓存远程/</id>
    <published>2012-02-28T07:05:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>作为Web App访问远程图片是经常的遇到功能，Wp本身提供了Image 很好的支持通过图片的Uri显示图片</p>
<p>public ImageSource Source { get; set; }</p>
<p>&lt;Image Source=”<a href="https://www.google.com/intl/en_com/images/srpr/logo3w.png" title="https://www.google.com/intl/en_com/images/srpr/logo3w.png" target="_blank">https://www.google.com/intl/en_com/images/srpr/logo3w.png</a>“ /&gt;</p>
<p>为了减少网络流量，需要将图片缓存到本地数据存储中。复习一下WP的本地数据存储：</p>
<h2 id="&nbsp;">&nbsp;</h2>
<h2 id="Windows_Phone_本地数据存储">Windows Phone 本地数据存储</h2>
<p>Windows Phone 应用程序可以使用独立存储将数据储存到手机本地。应用程序可以通过三种方式储存数据：</p>
<ol>
<li><strong>设置</strong>：使用 IsolatedStorageSettings 类将数据存储为键/值对。</li>
<li><strong>文件和文件夹</strong>：使用 IsolatedStorageFile 类存储文件和文件夹。</li>
<li><strong>本地数据库</strong>：7.1新增，只能支持LINQ TO SQL ，不能写SQL语句。</li>
</ol>
<p>&nbsp;</p>
<h2 id="本地存储图片">本地存储图片</h2>
<p>首先图片应该选择IsolatedStorageFile来存储：</p>
<p>WP提供了一个叫IsolatedStorageFileStream的Stream和FileStream操作一样</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> fileStream = isolatedStorageFile.OpenFile(filePath, FileMode.OpenOrCreate, FileAccess.Write))<br>{<br>       stream.CopyTo(fileStream);<br>}</pre><br></div>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h2 id="缓存的思路">缓存的思路</h2>
<p><a href="http://images.cnblogs.com/cnblogs_com/kiminozo/201202/201202282303009289.png" target="_blank"><img src="http://images.cnblogs.com/cnblogs_com/kiminozo/201202/201202282303026549.png" alt="image" title="image"></a></p>
<p>&nbsp;</p>
<p>现在是思路是首先检查是否被缓存里，首先定义一个公用的缓存文件夹，在静态构造函数中创建文件夹</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">string</span> CacheDirectory = <span style="color: #800000;">“</span><span style="color: #800000;">CachedImages</span><span style="color: #800000;">“</span>;<br><br>        <span style="color: #0000ff;">static</span> StorageCachedImage()<br>        {<br><br>            <span style="color: #008000;">//</span><span style="color: #008000;">创建缓存目录 </span><span style="color: #008000;"><br></span>            <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> isolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication())<br>            {<br>                <span style="color: #0000ff;">if</span> (!isolatedStorageFile.DirectoryExists(CacheDirectory))<br>                {<br>                    isolatedStorageFile.CreateDirectory(CacheDirectory);<br>                }<br>            }<br>        }</pre><br></div>

<p>然后将Url转换成文件名，我的方法比较简单直接替换&rsquo;/&rsquo;符号。使用FileExists判断文件是否存在</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;">文件路径 </span><span style="color: #008000;"><br></span>filePath = Path.Combine(CacheDirectory, uriSource.AbsolutePath.TrimStart(<span style="color: #800000;">‘</span><span style="color: #800000;">/</span><span style="color: #800000;">‘</span>).Replace(<span style="color: #800000;">‘</span><span style="color: #800000;">/</span><span style="color: #800000;">‘</span>, <span style="color: #800000;">‘</span><span style="color: #800000;">_</span><span style="color: #800000;">‘</span>));<br><br><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>       </span><span style="color: #808080;">///</span><span style="color: #008000;"> 打开缓存源<br>       </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span> <span style="color: #808080;"><br></span>       <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> OpenCatchSource()<br>       {<br>           <span style="color: #0000ff;">bool</span> exist;<br>           <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> isolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication())<br>           {<br>               exist = isolatedStorageFile.FileExists(filePath);<br>           }<br>           <span style="color: #0000ff;">if</span> (exist)<br>           {<br>               SetCacheStreamSource();<br>           }<br>           <span style="color: #0000ff;">else</span><br>           {<br>               SetWebStreamSource();<br>           }<br>       } </pre><br></div>

<p>如果没有缓存则通过Uri下载图片并保存到IsolatedStorageFile。</p>
<p>使用httpWebRequest实现下载，使用IsolatedStorageFileStream保存图片</p>
<div class="cnblogs_code"><br><pre><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>       </span><span style="color: #808080;">///</span><span style="color: #008000;"> 下载Uri中的图片<br>       </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span> <span style="color: #808080;"><br></span>       <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> SetWebStreamSource()<br>       {<br>           <span style="color: #0000ff;">var</span> httpWebRequest = (HttpWebRequest)WebRequest.Create(uriSource);<br>           httpWebRequest.AllowReadStreamBuffering = <span style="color: #0000ff;">true</span>;<br>           httpWebRequest.BeginGetResponse(ResponseCallBack, httpWebRequest);<br>       }<br><br>       <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>       </span><span style="color: #808080;">///</span><span style="color: #008000;"> 下载回调<br>       </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>       </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”asyncResult”&gt;&lt;/param&gt;</span> <span style="color: #808080;"><br></span>       <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> ResponseCallBack(IAsyncResult asyncResult)<br>       {<br>           <span style="color: #0000ff;">var</span> httpWebRequest = asyncResult.AsyncState <span style="color: #0000ff;">as</span> HttpWebRequest;<br>           <span style="color: #0000ff;">if</span>(httpWebRequest == <span style="color: #0000ff;">null</span>)<span style="color: #0000ff;">return</span>;<br>           <span style="color: #0000ff;">try</span><br>           {<br>               <span style="color: #0000ff;">var</span> response = httpWebRequest.EndGetResponse(asyncResult);<br>               <span style="color: #0000ff;">using</span>(<span style="color: #0000ff;">var</span> stream = response.GetResponseStream())<br>               <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> isolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication())<br>               <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> fileStream = isolatedStorageFile.OpenFile<br>                   (filePath, FileMode.OpenOrCreate, FileAccess.Write))<br>               {<br>                   stream.CopyTo(fileStream);<span style="color: #008000;">//</span><span style="color: #008000;">保存到本地 </span><span style="color: #008000;"><br></span>               }<br>               Dispatcher.BeginInvoke(SetCacheStreamSource);<br>           }<br>           <span style="color: #0000ff;">catch</span>(Exception err)<br>           {<br>               Debug.WriteLine(err.Message);<br>           }<br>       } </pre><br></div>

<p>保存到本地后下载，用IsolatedStorageFileStream打开本地图像流，并通过父类的SetSource设置图片流。</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> SetCacheStreamSource()<br>       {<br>           <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> isolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication())<br>           <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> stream = isolatedStorageFile.OpenFile(filePath, FileMode.Open, FileAccess.Read))<br>           {<br>               SetSource(stream);<br>           } </pre><br></div>

<p>&nbsp;</p>
<p>完整代码如下：</p>
<p>&nbsp;</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('b3b79a5b-f57a-4d8c-9859-8635be8d8975')"><img src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><img src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt=""><span class="cnblogs_code_collapse">View Code </span><br><div id="cnblogs_code_open_b3b79a5b-f57a-4d8c-9859-8635be8d8975" class="cnblogs_code_hide"><br><pre><span style="color: #0000ff;">using</span> System;<br><span style="color: #0000ff;">using</span> System.Diagnostics;<br><span style="color: #0000ff;">using</span> System.IO;<br><span style="color: #0000ff;">using</span> System.IO.IsolatedStorage;<br><span style="color: #0000ff;">using</span> System.Net;<br><span style="color: #0000ff;">using</span> System.Windows.Media.Imaging;<br><br><span style="color: #0000ff;">namespace</span> KimiStudio.Controls<br>{<br>    <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>    </span><span style="color: #808080;">///</span><span style="color: #008000;"> 独立存储缓存的图片源<br>    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">sealed</span> <span style="color: #0000ff;">class</span> StorageCachedImage : BitmapSource<br>    {<br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">readonly</span> Uri uriSource;<br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">readonly</span> <span style="color: #0000ff;">string</span> filePath;<br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">string</span> CacheDirectory = <span style="color: #800000;">“</span><span style="color: #800000;">CachedImages</span><span style="color: #800000;">“</span>;<br><br>        <span style="color: #0000ff;">static</span> StorageCachedImage()<br>        {<br><br>            <span style="color: #008000;">//</span><span style="color: #008000;">创建缓存目录</span><span style="color: #008000;"><br></span>            <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> isolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication())<br>            {<br>                <span style="color: #0000ff;">if</span> (!isolatedStorageFile.DirectoryExists(CacheDirectory))<br>                {<br>                    isolatedStorageFile.CreateDirectory(CacheDirectory);<br>                }<br>            }<br>        }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 创建一个独立存储缓存的图片源<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”uriSource”&gt;&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> StorageCachedImage(Uri uriSource)<br>        {<br>            <span style="color: #0000ff;">this</span>.uriSource = uriSource;<br><br>            <span style="color: #008000;">//</span><span style="color: #008000;">文件路径</span><span style="color: #008000;"><br></span>            filePath = Path.Combine(CacheDirectory, uriSource.AbsolutePath.TrimStart(<span style="color: #800000;">‘</span><span style="color: #800000;">/</span><span style="color: #800000;">‘</span>).Replace(<span style="color: #800000;">‘</span><span style="color: #800000;">/</span><span style="color: #800000;">‘</span>, <span style="color: #800000;">‘</span><span style="color: #800000;">_</span><span style="color: #800000;">‘</span>));<br>            OpenCatchSource();<br>        }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 打开缓存源<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> OpenCatchSource()<br>        {<br>            <span style="color: #0000ff;">bool</span> exist;<br>            <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> isolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication())<br>            {<br>                exist = isolatedStorageFile.FileExists(filePath);<br>            }<br>            <span style="color: #0000ff;">if</span> (exist)<br>            {<br>                SetCacheStreamSource();<br>            }<br>            <span style="color: #0000ff;">else</span><br>            {<br>                SetWebStreamSource();<br>            }<br>        }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 设置缓存流到图片<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> SetCacheStreamSource()<br>        {<br>            <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> isolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication())<br>            <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> stream = isolatedStorageFile.OpenFile(filePath, FileMode.Open, FileAccess.Read))<br>            {<br>                SetSource(stream);<br>            }<br>        }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 下载Uri中的图片<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> SetWebStreamSource()<br>        {<br>            <span style="color: #0000ff;">var</span> httpWebRequest = (HttpWebRequest)WebRequest.Create(uriSource);<br>            httpWebRequest.AllowReadStreamBuffering = <span style="color: #0000ff;">true</span>;<br>            httpWebRequest.BeginGetResponse(ResponseCallBack, httpWebRequest);<br>        }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 下载回调<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”asyncResult”&gt;&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> ResponseCallBack(IAsyncResult asyncResult)<br>        {<br>            <span style="color: #0000ff;">var</span> httpWebRequest = asyncResult.AsyncState <span style="color: #0000ff;">as</span> HttpWebRequest;<br>            <span style="color: #0000ff;">if</span>(httpWebRequest == <span style="color: #0000ff;">null</span>)<span style="color: #0000ff;">return</span>;<br>            <span style="color: #0000ff;">try</span><br>            {<br>                <span style="color: #0000ff;">var</span> response = httpWebRequest.EndGetResponse(asyncResult);<br>                <span style="color: #0000ff;">using</span>(<span style="color: #0000ff;">var</span> stream = response.GetResponseStream())<br>                <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> isolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication())<br>                <span style="color: #0000ff;">using</span> (<span style="color: #0000ff;">var</span> fileStream = isolatedStorageFile.OpenFile<br>                    (filePath, FileMode.OpenOrCreate, FileAccess.Write))<br>                {<br>                    stream.CopyTo(fileStream);<br>                }<br>                Dispatcher.BeginInvoke(SetCacheStreamSource);<br>            }<br>            <span style="color: #0000ff;">catch</span>(Exception err)<br>            {<br>                Debug.WriteLine(err.Message);<br>            }<br>        }<br>    }<br><br>}</pre><br></div><br></div>

<p>&nbsp;</p>
<h2 id="测试">测试</h2>
<p>定义一个Image</p>
<p>Uri uriSource = new Uri(@&rdquo;<a href="https://www.google.com/intl/en_com/images/srpr/logo3w.png" title="https://www.google.com/intl/en_com/images/srpr/logo3w.png" target="_blank">https://www.google.com/intl/en_com/images/srpr/logo3w.png</a>&rdquo;);</p>
<p>image1.ImageSource = new StorageCachedImage(uriSource);</p>
<p>&nbsp;</p>
<p>用IsoStoreSpy查看（这里是我APP实际的图)</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/kiminozo/201202/201202282303081561.jpg" target="_blank"><img src="http://images.cnblogs.com/cnblogs_com/kiminozo/201202/201202282303122527.jpg" alt="%Z7VL7E~500N8AI$NFO2Q]T" title="%Z7VL7E~500N8AI$NFO2Q]T"></a></p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用代理类包装异步调用方法实现异步命令]]></title>
    <link href="http://yoursite.com/2012/02/27/%E7%94%A8%E4%BB%A3%E7%90%86%E7%B1%BB%E5%8C%85%E8%A3%85%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2012/02/27/用代理类包装异步调用方法实现异步命令/</id>
    <published>2012-02-27T01:18:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>C#开发中经常需要使用使用异步操作，特别是Windows phone和Silverlight下层的很多IO相关的访问都是异步的。<br>标准异步方法一般都是Begin[Invoke]和End[Invoke]的一对方法，用法就不多说了。</p>
<p>我最近在写用命令模式常用的HttpRequest操作，就想将命令包装成异步方法，<br>想了很久使用了下面的方式包装异步：</p>
<p>首先是常规的异步调用时序：</p>
<p><img src="http://pic002.cnblogs.com/images/2012/25121/2012022717155572.png" alt=""></p>
<p>现在使用包装使用了2个类一个用于包装AsyncCallback，一个用于包装IAsyncResult，来包装这个时序。<br>类的代码如下:</p>
<p>&nbsp;</p>
<div class="cnblogs_code"><br><pre> <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>    </span><span style="color: #808080;">///</span><span style="color: #008000;"> 异步回调代理<br>    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AsyncCallbackDelegate<br>    {<br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 需要代理的异步回调<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">readonly</span> AsyncCallback asyncCallback;<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 原始调用对象<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">object</span> Delegate { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span>; }<br><br>        <span style="color: #0000ff;">public</span> AsyncResultDelegate Result { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span>; }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 构造 异步回调代理<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”asyncCallback”&gt;</span><span style="color: #008000;">需要代理的异步回调</span><span style="color: #808080;">&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> AsyncCallbackDelegate(AsyncCallback asyncCallback)<br>        {<br>            <span style="color: #0000ff;">this</span>.asyncCallback = asyncCallback;<br>        }<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 包装后的异步回调<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name=”asyncResult”&gt;&lt;/param&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> AsyncCallBack(IAsyncResult asyncResult)<br>        {<br>            <span style="color: #008000;">//</span><span style="color: #008000;">用AsyncResultDelegate包装asyncResult</span><span style="color: #008000;"><br></span>            <span style="color: #0000ff;">var</span> asyncResultDelegate = <span style="color: #0000ff;">new</span> AsyncResultDelegate(asyncResult) { Delegate = Delegate };<br>            asyncCallback(asyncResultDelegate);<span style="color: #008000;">//</span><span style="color: #008000;">调用原始异步回调</span><span style="color: #008000;"><br></span>        }<br>    }</pre><br></div>

<p>&nbsp;</p>
<div class="cnblogs_code"><br><pre><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>    </span><span style="color: #808080;">///</span><span style="color: #008000;"> 异步状态代理<br>    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AsyncResultDelegate : IAsyncResult<br>    {<br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 原始异步状态<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">readonly</span> IAsyncResult asyncResult;<br><br>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br>        </span><span style="color: #808080;">///</span><span style="color: #008000;"> 原始调用对象<br>        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br></span>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">object</span> Delegate { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span>; }<br><br>        <span style="color: #0000ff;">public</span> AsyncResultDelegate(IAsyncResult asyncResult)<br>        {<br>            <span style="color: #0000ff;">this</span>.asyncResult = asyncResult;<br>        }<br><br>        <span style="color: #0000ff;">#region</span> 装饰模式包装<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">object</span> AsyncState<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> AsyncResult.AsyncState; }<br>        }<br><br>        <span style="color: #0000ff;">public</span> System.Threading.WaitHandle AsyncWaitHandle<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> AsyncResult.AsyncWaitHandle; }<br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">bool</span> CompletedSynchronously<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> AsyncResult.CompletedSynchronously; }<br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">bool</span> IsCompleted<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> AsyncResult.IsCompleted; }<br>        }<br><br>        <span style="color: #0000ff;">public</span> IAsyncResult AsyncResult<br>        {<br>            <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> asyncResult; }<br>        }<br>        <span style="color: #0000ff;">#endregion</span><br>    }</pre><br></div>

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>包装后的调用时序：</p>
<p><img src="http://pic002.cnblogs.com/images/2012/25121/2012022717194217.png" alt=""></p>
<p>演示代码AddCommand 用于使用代理包装异步执行a+b返回结果</p>
<p>&nbsp;</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AddCommand<br>    {<br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">readonly</span> <span style="color: #0000ff;">int</span> a;<br>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">readonly</span> <span style="color: #0000ff;">int</span> b;<br><br>        <span style="color: #0000ff;">public</span> AddCommand(<span style="color: #0000ff;">int</span> a, <span style="color: #0000ff;">int</span> b)<br>        {<br>            <span style="color: #0000ff;">this</span>.a = a;<br>            <span style="color: #0000ff;">this</span>.b = b;<br>        }<br><br>        <span style="color: #0000ff;">public</span> IAsyncResult BeginInvoke(AsyncCallback asyncCallback, <span style="color: #0000ff;">object</span> state)<br>        {<br>            Func&lt;<span style="color: #0000ff;">int</span>, <span style="color: #0000ff;">int</span>, <span style="color: #0000ff;">int</span>&gt; addFunc = (x, y) =&gt; x + y;<span style="color: #008000;">//</span><span style="color: #008000;">测试用的原始异步调用对象</span><span style="color: #008000;"><br></span><br>            AsyncCallback callbackDelegate = asyncCallback;<br>            <span style="color: #0000ff;">if</span> (asyncCallback != <span style="color: #0000ff;">null</span>)<br>            {<br>                <span style="color: #008000;">//</span><span style="color: #008000;">用AsyncCallbackDelegate包装AsyncCallback</span><span style="color: #008000;"><br></span>                <span style="color: #0000ff;">var</span> tmp = <span style="color: #0000ff;">new</span> AsyncCallbackDelegate(asyncCallback) { Delegate = addFunc };<br>                callbackDelegate = tmp.AsyncCallBack;<br>            }<br>            <span style="color: #0000ff;">var</span> asyncResult = addFunc.BeginInvoke(a, b, callbackDelegate, state);<br>            <span style="color: #008000;">//</span><span style="color: #008000;">用AsyncResultDelegate包装asyncResult</span><span style="color: #008000;"><br></span>            <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> AsyncResultDelegate(asyncResult) { Delegate = addFunc };<br>        }<br><br>        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> EndInovke(IAsyncResult result)<br>        {<br>            <span style="color: #0000ff;">var</span> asyncResultDelegate = (AsyncResultDelegate)result;<span style="color: #008000;">//</span><span style="color: #008000;">还原AsyncResultDelegate</span><span style="color: #008000;"><br></span>            Func&lt;<span style="color: #0000ff;">int</span>, <span style="color: #0000ff;">int</span>, <span style="color: #0000ff;">int</span>&gt; addFunc = (Func&lt;<span style="color: #0000ff;">int</span>, <span style="color: #0000ff;">int</span>, <span style="color: #0000ff;">int</span>&gt;)asyncResultDelegate.Delegate;<span style="color: #008000;">//</span><span style="color: #008000;">获得原始对象</span><span style="color: #008000;"><br></span>            <span style="color: #0000ff;">return</span> addFunc.EndInvoke(asyncResultDelegate.AsyncResult);<span style="color: #008000;">//</span><span style="color: #008000;">传入原始AsyncResult</span><span style="color: #008000;"><br></span>        }<br>    }</pre><br></div>

<p>&nbsp;</p>
<p>调用AddCommand 支持2种调用方式</p>
<p>&nbsp;</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">class</span> Program<br>    {<br>        <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span>[] args)<br>        {<br>            <span style="color: #008000;">//</span><span style="color: #008000;">主线程等待后调用EndInovke</span><span style="color: #008000;"><br></span>            {<br>                AddCommand invoker = <span style="color: #0000ff;">new</span> AddCommand(<span style="color: #800080;">1</span>, <span style="color: #800080;">2</span>);<br>                <span style="color: #0000ff;">var</span> async = invoker.BeginInvoke(<span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">null</span>);<br>                async.AsyncWaitHandle.WaitOne();<br>                <span style="color: #0000ff;">int</span> result = invoker.EndInovke(async);<br>                Console.WriteLine(result);<br>            }<br><br>            <span style="color: #008000;">//</span><span style="color: #008000;">由CallBack调用EndInovke</span><span style="color: #008000;"><br></span>            {<br>                AddCommand invoker = <span style="color: #0000ff;">new</span> AddCommand(<span style="color: #800080;">5</span>, <span style="color: #800080;">9</span>);<br>                <span style="color: #0000ff;">var</span> async = invoker.BeginInvoke(CallBack, invoker);<br>                async.AsyncWaitHandle.WaitOne();<br>            }<br>            Console.ReadLine();<br>        }<br><br>        <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> CallBack(IAsyncResult asyncResult)<br>        {<br>            AddCommand invoker = asyncResult.AsyncState <span style="color: #0000ff;">as</span> AddCommand;<br>            <span style="color: #0000ff;">int</span> result = invoker.EndInovke(asyncResult);<br>            Console.WriteLine(result);<br>        }<br><br>    }</pre><br></div>

<p>&nbsp;</p>
<p>varcolor: #0000ff;</p>
<p>/spanspan style=</p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决log4net在.net 4.0 ClientProfile下无法使用]]></title>
    <link href="http://yoursite.com/2012/02/22/%E8%A7%A3%E5%86%B3log4net%E5%9C%A8-net-4-0-clientprofile%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2012/02/22/解决log4net在-net-4-0-clientprofile下无法使用/</id>
    <published>2012-02-22T05:11:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>log4net在.net 4.0 ClientProfile无法使用，原因是</p>
<p>log4net里面有AspNetTraceAppender、AspNetPatternConverter等使用了System.Web，而 ClientProfile没有包含这个命名空间。</p>
<p>解决办法很简单</p>
<p>下载&nbsp; log4net的源代码，将 ClientProfile不支持的类全部去掉，重新编译就可以了。</p>
<p>&nbsp;</p>
<p>我这里已经编译好了一个：</p>
<p><a href="http://files.cnblogs.com/kiminozo/log4net.ClientProfile.zip" target="_blank">http://files.cnblogs.com/kiminozo/log4net.ClientProfile.zip</a></p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从FLC中学习的设计模式系列-结构型模式(2)-装饰]]></title>
    <link href="http://yoursite.com/2012/02/22/%E4%BB%8Eflc%E4%B8%AD%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F2-%E8%A3%85%E9%A5%B0/"/>
    <id>http://yoursite.com/2012/02/22/从flc中学习的设计模式系列-结构型模式2-装饰/</id>
    <published>2012-02-22T04:43:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>装饰模式是通过包装类动态地往一个类中添加新的行为</p>
<p>&nbsp;</p>
<h2 id="装饰模式">装饰模式</h2>
<p><a href="http://zh.wikipedia.org/wiki/修饰模式" title="http://zh.wikipedia.org/wiki/修饰模式" target="_blank">http://zh.wikipedia.org/wiki/修饰模式</a></p>
<p>通过使用修饰模式，可以在运行时扩充一个类的功能。原理是：增加一个修饰类包裹原来的类，包裹的方式一般是通过在将原来的对象作为修饰类的构造函数的参数。装饰类实现新的功能，但是，在不需要用到新功能的地方，它可以直接调用原来的类中的方法。修饰类必须和原来的类有相同的接口。</p>
<p>修饰模式是类继承的另外一种选择。类继承在编译时候增加行为，而装饰模式是在运行时增加行为。</p>
<p>&nbsp;</p>
<h2 id="FCL中的装饰模式">FCL中的装饰模式</h2>
<p>在流处理中装饰模式非常常用，典型的就是GZipStream</p>
<p>提供用于压缩和解压缩流的方法和属性。</p>
<p>结构如下：</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/kiminozo/201202/201202222042442002.jpg" title="7VJRRCT[MXXCZCQ77%{`FPG[4]" target="_blank">![7VJRRCT[MXXCZCQ77%{`FPG[4]</a>](<a href="http://images.cnblogs.com/cnblogs_com/kiminozo/201202/201202222042437466.jpg" target="_blank">http://images.cnblogs.com/cnblogs_com/kiminozo/201202/201202222042437466.jpg</a>)</p>
<p>其中GZipStream 既继承了Stream 又组合了Stream ，相当于一个包装，并在这个包装上提供了压缩等方法。</p>
<p>&nbsp;</p>
<pre class="brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;">using (FileStream outFile =  File.Create(fi.FullName + ".gz"))
{
     using (GZipStream Compress = 
               new GZipStream(outFile,CompressionMode.Compress))
      {

             // 写入.Compress 流
             inFile.CopyTo(Compress);           
        }
 }</pre>]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从FLC中学习的设计模式系列-结构型模式(1)-适配器]]></title>
    <link href="http://yoursite.com/2012/02/22/%E4%BB%8Eflc%E4%B8%AD%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F1-%E9%80%82%E9%85%8D%E5%99%A8/"/>
    <id>http://yoursite.com/2012/02/22/从flc中学习的设计模式系列-结构型模式1-适配器/</id>
    <published>2012-02-22T04:29:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>适配器模式是让一个接口兼容并适应另一个通用的接口的模式。</p>
<p>&nbsp;</p>
<h2 id="适配器模式">适配器模式</h2>
<p><a href="http://zh.wikipedia.org/wiki/适配器模式" title="http://zh.wikipedia.org/wiki/适配器模式" target="_blank">http://zh.wikipedia.org/wiki/适配器模式</a></p>
<p>适配器模式（英语：adapter pattern）有时候也称包装样式或者包装。将一个类的接口转接成用户所期待的。一个适配使得因接口不兼容而不能在一起工作的类工作在一起，做法是将类别自己的接口包裹在一个已存在的类中。</p>
<p>&nbsp;</p>
<h2 id="FCL中的适配器模式">FCL中的适配器模式</h2>
<p>比较典型的是WindowsFormsHost 类</p>
<p>允许在 WPF 页面上承载 Windows Forms控件的元素。</p>
<p>也就是将Windows Forms控件适配为Wpf的FrameworkElement</p>
<p>结构如下：</p>
<p>&nbsp;</p>
<p><img src="http://pic002.cnblogs.com/images/2012/25121/2012022220282210.jpg" alt=""></p>
<p>示例代码：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">WindowsFormsHost</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">　　&lt;</span><span style="color: #800000;">wf:MaskedTextBox </span><span style="color: #ff0000;">x:Name</span><span style="color: #0000ff;">=”mtbDate”</span><span style="color: #ff0000;"> Mask</span><span style="color: #0000ff;">=”00/00/0000”</span><span style="color: #0000ff;">/&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">WindowsFormsHost</span><span style="color: #0000ff;">&gt;</span></pre><br></div>]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从FLC中学习的设计模式系列-创建型模式(5)-原型]]></title>
    <link href="http://yoursite.com/2012/02/21/%E4%BB%8Eflc%E4%B8%AD%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F5-%E5%8E%9F%E5%9E%8B/"/>
    <id>http://yoursite.com/2012/02/21/从flc中学习的设计模式系列-创建型模式5-原型/</id>
    <published>2012-02-21T05:13:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>原型模式就是由对象创建当前自身的副本的模式。副本是指深拷贝的内存空间，一般用于比较复杂的对象。</p>
<p>&nbsp;</p>
<h2 id="原型模式">原型模式</h2>
<p><a href="http://zh.wikipedia.org/wiki/原型模式" title="http://zh.wikipedia.org/wiki/原型模式" target="_blank">http://zh.wikipedia.org/wiki/原型模式</a></p>
<p>原型模式是创建型模式的一种,其特点在于通过&ldquo;复制&rdquo;一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的&ldquo;原型&rdquo;，这个原型是可定制的。</p>
<p>原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</p>
<p>&nbsp;</p>
<h2 id="FLC中的原型模式">FLC中的原型模式</h2>
<p>DataTable.Clone方法 是典型的原型应用。克隆 DataTable 的结构，包括所有 DataTable 架构和约束。</p>
<pre class="brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;">DataTable table = new DataTable();
//...
DataTable cloneTable = table.Clone();
//..</pre>

<p>table 和cloneTable 可以分别修改，互不影响。</p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从FLC中学习的设计模式系列-创建型模式(4)-建造者]]></title>
    <link href="http://yoursite.com/2012/02/21/%E4%BB%8Eflc%E4%B8%AD%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F4-%E5%BB%BA%E9%80%A0%E8%80%85/"/>
    <id>http://yoursite.com/2012/02/21/从flc中学习的设计模式系列-创建型模式4-建造者/</id>
    <published>2012-02-21T04:59:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>Builder建造者模式 ，它可以将复杂对象的建造过程抽象分割出来。</p>
<p>&nbsp;</p>
<h2 id="建造者模式">建造者模式</h2>
<p><a href="http://zh.wikipedia.org/wiki/生成器_(设计模式" target="_blank">http://zh.wikipedia.org/wiki/生成器_(设计模式)</a> “<a href="http://zh.wikipedia.org/wiki/生成器_(设计模式" target="_blank">http://zh.wikipedia.org/wiki/生成器_(设计模式</a>)”)</p>
<p>建造模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p>
<p>&nbsp;</p>
<h2 id="FLC中的建造者模式">FLC中的建造者模式</h2>
<p>最常用的是StringBuilder 它是简化的建造者模式</p>
<p>使用方法如下：</p>
<pre class="brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;">StringBuilder stringBuilder =new StringBuilder();
stringBuilder.Append("Hello");
stringBuilder.Append(' ');
stringBuilder.Append(123);
string result = stringBuilder.ToString();
Console.WriteLine(result);</pre>

<p>&nbsp;</p>
<p>还有一个是SqlConnectionStringBuilder 为创建和管理由 <a href="http://127.0.0.1:47873/help/1-1524/ms.help?method=page&amp;id=T%3ASYSTEM.DATA.SQLCLIENT.SQLCONNECTION&amp;product=VS&amp;productVersion=100&amp;topicVersion=100&amp;locale=ZH-CN&amp;topicLocale=ZH-CN&amp;embedded=true" target="_blank">SqlConnection</a> 类使用的连接字符串的内容提供了一种简单方法。</p>
<pre class="brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;">SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();
builder.DataSource = "(local)";
builder.InitialCatalog = "MyDatabase";
builder.UserID = "sa";
builder.Password = "123456";
Console.WriteLine(builder.ConnectionString);</pre>]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从FLC中学习的设计模式系列-创建型模式(3)-工厂方法]]></title>
    <link href="http://yoursite.com/2012/02/15/%E4%BB%8Eflc%E4%B8%AD%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F3-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2012/02/15/从flc中学习的设计模式系列-创建型模式3-工厂方法/</id>
    <published>2012-02-15T04:36:00.000Z</published>
    <updated>2014-03-19T14:36:26.000Z</updated>
    <content type="html"><![CDATA[<p>工厂方法是一组方法， 他们针对不同条件返回不同的类实例，这些类一般有共同的父类。</p>
<p>&nbsp;</p>
<h2 id="工厂方法模式">工厂方法模式</h2>
<p>来自： <a href="http://zh.wikipedia.org/wiki/工厂方法模式" title="http://zh.wikipedia.org/wiki/工厂方法模式" target="_blank">http://zh.wikipedia.org/wiki/工厂方法模式</a></p>
<p>工厂方法模式 是一种面向对象的设计模式。通过调用不同的方法返回需要的类，而不是去实例化具体的类。 对实例创建进行了包装。 工厂方法是一组方法， 他们针对不同条件返回不同的类实例，这些类一般有共同的父类。</p>
<p>工厂方法模式实施一种按需分配的策略， 即传入参数进行选择， 工厂方法根据参数进行选择，返回具体的实例。</p>
<p>&nbsp;</p>
<h2 id="FLC中的工厂方法模式">FLC中的工厂方法模式</h2>
<p>在FLC中比较典型的就是WebRequest.Create(Uri &nbsp;requestUri)方法</p>
<p>MSDN的介绍如下：</p>
<p>Create 方法将运行时确定的 WebRequest 类的子代作为与 requestUri 最接近的注册匹配项返回。</p>
<p>当以 <a href="http:// 或" target="_blank">http:// 或</a> <a href="https://开头的" target="_blank">https://开头的</a> URI 在 requestUri 中传递时，由 Create 返回一个 HttpWebRequest。</p>
<p>如果改为传递以 <a href="ftp:// 开头的">ftp:// 开头的</a> URI，则 Create 方法将返回 FtpWebRequest 实例。</p>
<p>如果改为传递以 file:// 开头的 URI，则 Create 方法将返回 FileWebRequest 实例。</p>
<p>&nbsp;</p>
<p>类图大致如下：</p>
<p>因为WebRequest 本身也作为了工厂类，为了区别我画了2次。</p>
<p><img src="http://pic002.cnblogs.com/images/2012/25121/2012021520203341.jpg" alt=""></p>
<p>&nbsp;</p>
]]></content>
    
    
      <category term="未分类" scheme="http://yoursite.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
</feed>
